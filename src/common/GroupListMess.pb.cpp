// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupListMess.proto

#include "GroupListMess.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GroupListMess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupInfo_GroupListMess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GroupListMess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GroupList_GroupListMess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GroupListMess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GroupListInit_GroupListMess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GroupListMess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupListRemove_GroupListMess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GroupListMess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GrouplistAdd_GroupListMess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GroupListMess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_GroupListMess_2eproto;
namespace phxgrouplist {
class NodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class GroupInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupInfo> _instance;
} _GroupInfo_default_instance_;
class GroupListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupList> _instance;
} _GroupList_default_instance_;
class GroupListInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupListInit> _instance;
} _GroupListInit_default_instance_;
class GrouplistAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrouplistAdd> _instance;
} _GrouplistAdd_default_instance_;
class GroupListRemoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupListRemove> _instance;
} _GroupListRemove_default_instance_;
class GrouplistMessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrouplistMess> _instance;
} _GrouplistMess_default_instance_;
class LeadersChangeMessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeadersChangeMess> _instance;
} _LeadersChangeMess_default_instance_;
class NodeStorageMessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeStorageMess> _instance;
} _NodeStorageMess_default_instance_;
}  // namespace phxgrouplist
static void InitDefaultsscc_info_GroupInfo_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_GroupInfo_default_instance_;
    new (ptr) ::phxgrouplist::GroupInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::GroupInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupInfo_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupInfo_GroupListMess_2eproto}, {
      &scc_info_NodeInfo_GroupListMess_2eproto.base,}};

static void InitDefaultsscc_info_GroupList_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_GroupList_default_instance_;
    new (ptr) ::phxgrouplist::GroupList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::GroupList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GroupList_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GroupList_GroupListMess_2eproto}, {
      &scc_info_NodeInfo_GroupListMess_2eproto.base,
      &scc_info_GroupInfo_GroupListMess_2eproto.base,}};

static void InitDefaultsscc_info_GroupListInit_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_GroupListInit_default_instance_;
    new (ptr) ::phxgrouplist::GroupListInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::GroupListInit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GroupListInit_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GroupListInit_GroupListMess_2eproto}, {
      &scc_info_NodeInfo_GroupListMess_2eproto.base,
      &scc_info_GroupList_GroupListMess_2eproto.base,}};

static void InitDefaultsscc_info_GroupListRemove_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_GroupListRemove_default_instance_;
    new (ptr) ::phxgrouplist::GroupListRemove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::GroupListRemove::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupListRemove_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupListRemove_GroupListMess_2eproto}, {
      &scc_info_NodeInfo_GroupListMess_2eproto.base,}};

static void InitDefaultsscc_info_GrouplistAdd_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_GrouplistAdd_default_instance_;
    new (ptr) ::phxgrouplist::GrouplistAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::GrouplistAdd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GrouplistAdd_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GrouplistAdd_GroupListMess_2eproto}, {
      &scc_info_NodeInfo_GroupListMess_2eproto.base,}};

static void InitDefaultsscc_info_GrouplistMess_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_GrouplistMess_default_instance_;
    new (ptr) ::phxgrouplist::GrouplistMess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::GrouplistMess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GrouplistMess_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GrouplistMess_GroupListMess_2eproto}, {
      &scc_info_GroupListInit_GroupListMess_2eproto.base,
      &scc_info_GrouplistAdd_GroupListMess_2eproto.base,
      &scc_info_GroupListRemove_GroupListMess_2eproto.base,}};

static void InitDefaultsscc_info_LeadersChangeMess_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_LeadersChangeMess_default_instance_;
    new (ptr) ::phxgrouplist::LeadersChangeMess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::LeadersChangeMess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeadersChangeMess_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeadersChangeMess_GroupListMess_2eproto}, {
      &scc_info_NodeInfo_GroupListMess_2eproto.base,}};

static void InitDefaultsscc_info_NodeInfo_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_NodeInfo_default_instance_;
    new (ptr) ::phxgrouplist::NodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::NodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInfo_GroupListMess_2eproto}, {}};

static void InitDefaultsscc_info_NodeStorageMess_GroupListMess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxgrouplist::_NodeStorageMess_default_instance_;
    new (ptr) ::phxgrouplist::NodeStorageMess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxgrouplist::NodeStorageMess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeStorageMess_GroupListMess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeStorageMess_GroupListMess_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GroupListMess_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GroupListMess_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GroupListMess_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GroupListMess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::NodeInfo, nodeport_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::NodeInfo, nodeip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupInfo, leader_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupInfo, nodelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupList, epoch_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupList, master_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupList, groupstatus_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupList, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListInit, epoch_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListInit, master_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListInit, init_grouplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistAdd, epoch_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistAdd, master_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistAdd, group_leader_addto_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistAdd, new_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListRemove, epoch_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListRemove, master_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListRemove, group_oldleader_removefrom_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListRemove, group_newleader_removefrom_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GroupListRemove, remove_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistMess, op_type_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistMess, gl_init_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistMess, gl_add_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistMess, gl_remove_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::GrouplistMess, epoch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::LeadersChangeMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::LeadersChangeMess, op_type_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::LeadersChangeMess, epoch_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::LeadersChangeMess, leaders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::NodeStorageMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::NodeStorageMess, capacity_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::NodeStorageMess, dfs_used_),
  PROTOBUF_FIELD_OFFSET(::phxgrouplist::NodeStorageMess, remaining_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::phxgrouplist::NodeInfo)},
  { 7, -1, sizeof(::phxgrouplist::GroupInfo)},
  { 14, -1, sizeof(::phxgrouplist::GroupList)},
  { 23, -1, sizeof(::phxgrouplist::GroupListInit)},
  { 31, -1, sizeof(::phxgrouplist::GrouplistAdd)},
  { 40, -1, sizeof(::phxgrouplist::GroupListRemove)},
  { 50, -1, sizeof(::phxgrouplist::GrouplistMess)},
  { 60, -1, sizeof(::phxgrouplist::LeadersChangeMess)},
  { 68, -1, sizeof(::phxgrouplist::NodeStorageMess)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_GroupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_GroupList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_GroupListInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_GrouplistAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_GroupListRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_GrouplistMess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_LeadersChangeMess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxgrouplist::_NodeStorageMess_default_instance_),
};

const char descriptor_table_protodef_GroupListMess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023GroupListMess.proto\022\014phxgrouplist\",\n\010N"
  "odeInfo\022\020\n\010nodePort\030\001 \001(\r\022\016\n\006nodeIp\030\002 \001("
  "\t\"]\n\tGroupInfo\022&\n\006leader\030\001 \001(\0132\026.phxgrou"
  "plist.NodeInfo\022(\n\010Nodelist\030\002 \003(\0132\026.phxgr"
  "ouplist.NodeInfo\"\275\001\n\tGroupList\022\r\n\005epoch\030"
  "\002 \001(\r\022&\n\006Master\030\003 \001(\0132\026.phxgrouplist.Nod"
  "eInfo\0224\n\013groupStatus\030\004 \001(\0162\037.phxgrouplis"
  "t.GroupList.st_type\022\'\n\006groups\030\005 \003(\0132\027.ph"
  "xgrouplist.GroupInfo\"\032\n\007st_type\022\017\n\013GROUP"
  "_BUILD\020\000\"w\n\rGroupListInit\022\r\n\005epoch\030\001 \001(\r"
  "\022&\n\006Master\030\002 \001(\0132\026.phxgrouplist.NodeInfo"
  "\022/\n\016init_grouplist\030\003 \001(\0132\027.phxgrouplist."
  "GroupList\"\243\001\n\014GrouplistAdd\022\r\n\005epoch\030\001 \001("
  "\r\022&\n\006Master\030\002 \001(\0132\026.phxgrouplist.NodeInf"
  "o\0222\n\022group_leader_addto\030\003 \001(\0132\026.phxgroup"
  "list.NodeInfo\022(\n\010new_node\030\004 \001(\0132\026.phxgro"
  "uplist.NodeInfo\"\355\001\n\017GroupListRemove\022\r\n\005e"
  "poch\030\001 \001(\r\022&\n\006Master\030\002 \001(\0132\026.phxgrouplis"
  "t.NodeInfo\022:\n\032group_oldleader_removefrom"
  "\030\003 \001(\0132\026.phxgrouplist.NodeInfo\022:\n\032group_"
  "newleader_removefrom\030\004 \001(\0132\026.phxgrouplis"
  "t.NodeInfo\022+\n\013remove_node\030\005 \001(\0132\026.phxgro"
  "uplist.NodeInfo\"\267\002\n\rGrouplistMess\0225\n\007op_"
  "type\030\001 \001(\0162$.phxgrouplist.GrouplistMess."
  "op_types\022,\n\007gl_init\030\002 \001(\0132\033.phxgrouplist"
  ".GroupListInit\022*\n\006gl_add\030\003 \001(\0132\032.phxgrou"
  "plist.GrouplistAdd\0220\n\tgl_remove\030\004 \001(\0132\035."
  "phxgrouplist.GroupListRemove\022\r\n\005epoch\030\005 "
  "\001(\r\"T\n\010op_types\022\013\n\007GL_INIT\020\000\022\n\n\006GL_ADD\020\001"
  "\022\r\n\tGL_REMOVE\020\002\022\017\n\013GL_SHUTDOWN\020\003\022\017\n\013GL_K"
  "ILLNODE\020\004\"\312\001\n\021LeadersChangeMess\0229\n\007op_ty"
  "pe\030\001 \001(\0162(.phxgrouplist.LeadersChangeMes"
  "s.op_types\022\r\n\005epoch\030\002 \001(\r\022\'\n\007leaders\030\003 \003"
  "(\0132\026.phxgrouplist.NodeInfo\"B\n\010op_types\022\013"
  "\n\007LC_INIT\020\000\022\n\n\006LC_ADD\020\001\022\r\n\tLC_REMOVE\020\002\022\016"
  "\n\nLC_REPLACE\020\003\"H\n\017NodeStorageMess\022\020\n\010cap"
  "acity\030\001 \001(\004\022\020\n\010dfs_used\030\002 \001(\004\022\021\n\tremaini"
  "ng\030\003 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GroupListMess_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GroupListMess_2eproto_sccs[9] = {
  &scc_info_GroupInfo_GroupListMess_2eproto.base,
  &scc_info_GroupList_GroupListMess_2eproto.base,
  &scc_info_GroupListInit_GroupListMess_2eproto.base,
  &scc_info_GroupListRemove_GroupListMess_2eproto.base,
  &scc_info_GrouplistAdd_GroupListMess_2eproto.base,
  &scc_info_GrouplistMess_GroupListMess_2eproto.base,
  &scc_info_LeadersChangeMess_GroupListMess_2eproto.base,
  &scc_info_NodeInfo_GroupListMess_2eproto.base,
  &scc_info_NodeStorageMess_GroupListMess_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GroupListMess_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GroupListMess_2eproto = {
  false, false, descriptor_table_protodef_GroupListMess_2eproto, "GroupListMess.proto", 1496,
  &descriptor_table_GroupListMess_2eproto_once, descriptor_table_GroupListMess_2eproto_sccs, descriptor_table_GroupListMess_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_GroupListMess_2eproto::offsets,
  file_level_metadata_GroupListMess_2eproto, 9, file_level_enum_descriptors_GroupListMess_2eproto, file_level_service_descriptors_GroupListMess_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GroupListMess_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GroupListMess_2eproto)), true);
namespace phxgrouplist {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupList_st_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GroupListMess_2eproto);
  return file_level_enum_descriptors_GroupListMess_2eproto[0];
}
bool GroupList_st_type_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GroupList_st_type GroupList::GROUP_BUILD;
constexpr GroupList_st_type GroupList::st_type_MIN;
constexpr GroupList_st_type GroupList::st_type_MAX;
constexpr int GroupList::st_type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrouplistMess_op_types_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GroupListMess_2eproto);
  return file_level_enum_descriptors_GroupListMess_2eproto[1];
}
bool GrouplistMess_op_types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GrouplistMess_op_types GrouplistMess::GL_INIT;
constexpr GrouplistMess_op_types GrouplistMess::GL_ADD;
constexpr GrouplistMess_op_types GrouplistMess::GL_REMOVE;
constexpr GrouplistMess_op_types GrouplistMess::GL_SHUTDOWN;
constexpr GrouplistMess_op_types GrouplistMess::GL_KILLNODE;
constexpr GrouplistMess_op_types GrouplistMess::op_types_MIN;
constexpr GrouplistMess_op_types GrouplistMess::op_types_MAX;
constexpr int GrouplistMess::op_types_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeadersChangeMess_op_types_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GroupListMess_2eproto);
  return file_level_enum_descriptors_GroupListMess_2eproto[2];
}
bool LeadersChangeMess_op_types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LeadersChangeMess_op_types LeadersChangeMess::LC_INIT;
constexpr LeadersChangeMess_op_types LeadersChangeMess::LC_ADD;
constexpr LeadersChangeMess_op_types LeadersChangeMess::LC_REMOVE;
constexpr LeadersChangeMess_op_types LeadersChangeMess::LC_REPLACE;
constexpr LeadersChangeMess_op_types LeadersChangeMess::op_types_MIN;
constexpr LeadersChangeMess_op_types LeadersChangeMess::op_types_MAX;
constexpr int LeadersChangeMess::op_types_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
class NodeInfo::_Internal {
 public:
};

NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodeip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodeip().empty()) {
    nodeip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nodeip(),
      GetArena());
  }
  nodeport_ = from.nodeport_;
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_GroupListMess_2eproto.base);
  nodeip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeport_ = 0u;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:phxgrouplist.NodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nodeip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast< NodeInfo* >(object);
  (void)_this;
}
void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodeip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nodeport_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nodePort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nodeport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodeIp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nodeip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxgrouplist.NodeInfo.nodeIp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nodePort = 1;
  if (this->nodeport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nodeport(), target);
  }

  // string nodeIp = 2;
  if (this->nodeip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeip().data(), static_cast<int>(this->_internal_nodeip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxgrouplist.NodeInfo.nodeIp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nodeip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeIp = 2;
  if (this->nodeip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeip());
  }

  // uint32 nodePort = 1;
  if (this->nodeport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nodeport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodeip().size() > 0) {
    _internal_set_nodeip(from._internal_nodeip());
  }
  if (from.nodeport() != 0) {
    _internal_set_nodeport(from._internal_nodeport());
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodeip_.Swap(&other->nodeip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nodeport_, other->nodeport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupInfo::InitAsDefaultInstance() {
  ::phxgrouplist::_GroupInfo_default_instance_._instance.get_mutable()->leader_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
}
class GroupInfo::_Internal {
 public:
  static const ::phxgrouplist::NodeInfo& leader(const GroupInfo* msg);
};

const ::phxgrouplist::NodeInfo&
GroupInfo::_Internal::leader(const GroupInfo* msg) {
  return *msg->leader_;
}
GroupInfo::GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.GroupInfo)
}
GroupInfo::GroupInfo(const GroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodelist_(from.nodelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leader()) {
    leader_ = new ::phxgrouplist::NodeInfo(*from.leader_);
  } else {
    leader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupInfo_GroupListMess_2eproto.base);
  leader_ = nullptr;
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:phxgrouplist.GroupInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leader_;
}

void GroupInfo::ArenaDtor(void* object) {
  GroupInfo* _this = reinterpret_cast< GroupInfo* >(object);
  (void)_this;
}
void GroupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupInfo& GroupInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupInfo_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodelist_.Clear();
  if (GetArena() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phxgrouplist.NodeInfo leader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phxgrouplist.NodeInfo Nodelist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phxgrouplist.NodeInfo leader = 1;
  if (this->has_leader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::leader(this), target, stream);
  }

  // repeated .phxgrouplist.NodeInfo Nodelist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_nodelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.GroupInfo)
  return target;
}

size_t GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.GroupInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxgrouplist.NodeInfo Nodelist = 2;
  total_size += 1UL * this->_internal_nodelist_size();
  for (const auto& msg : this->nodelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .phxgrouplist.NodeInfo leader = 1;
  if (this->has_leader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.GroupInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.GroupInfo)
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodelist_.MergeFrom(from.nodelist_);
  if (from.has_leader()) {
    _internal_mutable_leader()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_leader());
  }
}

void GroupInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  return true;
}

void GroupInfo::InternalSwap(GroupInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodelist_.InternalSwap(&other->nodelist_);
  swap(leader_, other->leader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupList::InitAsDefaultInstance() {
  ::phxgrouplist::_GroupList_default_instance_._instance.get_mutable()->master_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
}
class GroupList::_Internal {
 public:
  static const ::phxgrouplist::NodeInfo& master(const GroupList* msg);
};

const ::phxgrouplist::NodeInfo&
GroupList::_Internal::master(const GroupList* msg) {
  return *msg->master_;
}
GroupList::GroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.GroupList)
}
GroupList::GroupList(const GroupList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_master()) {
    master_ = new ::phxgrouplist::NodeInfo(*from.master_);
  } else {
    master_ = nullptr;
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupstatus_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(groupstatus_));
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.GroupList)
}

void GroupList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupList_GroupListMess_2eproto.base);
  ::memset(&master_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupstatus_) -
      reinterpret_cast<char*>(&master_)) + sizeof(groupstatus_));
}

GroupList::~GroupList() {
  // @@protoc_insertion_point(destructor:phxgrouplist.GroupList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete master_;
}

void GroupList::ArenaDtor(void* object) {
  GroupList* _this = reinterpret_cast< GroupList* >(object);
  (void)_this;
}
void GroupList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupList& GroupList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupList_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void GroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.GroupList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  if (GetArena() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupstatus_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(groupstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo Master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.GroupList.st_type groupStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_groupstatus(static_cast<::phxgrouplist::GroupList_st_type>(val));
        } else goto handle_unusual;
        continue;
      // repeated .phxgrouplist.GroupInfo groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.GroupList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 2;
  if (this->epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_epoch(), target);
  }

  // .phxgrouplist.NodeInfo Master = 3;
  if (this->has_master()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::master(this), target, stream);
  }

  // .phxgrouplist.GroupList.st_type groupStatus = 4;
  if (this->groupstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_groupstatus(), target);
  }

  // repeated .phxgrouplist.GroupInfo groups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.GroupList)
  return target;
}

size_t GroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.GroupList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxgrouplist.GroupInfo groups = 5;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .phxgrouplist.NodeInfo Master = 3;
  if (this->has_master()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *master_);
  }

  // uint32 epoch = 2;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());
  }

  // .phxgrouplist.GroupList.st_type groupStatus = 4;
  if (this->groupstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_groupstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.GroupList)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.GroupList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.GroupList)
    MergeFrom(*source);
  }
}

void GroupList::MergeFrom(const GroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.GroupList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.has_master()) {
    _internal_mutable_master()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_master());
  }
  if (from.epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from.groupstatus() != 0) {
    _internal_set_groupstatus(from._internal_groupstatus());
  }
}

void GroupList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.GroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupList::CopyFrom(const GroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.GroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupList::IsInitialized() const {
  return true;
}

void GroupList::InternalSwap(GroupList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupList, groupstatus_)
      + sizeof(GroupList::groupstatus_)
      - PROTOBUF_FIELD_OFFSET(GroupList, master_)>(
          reinterpret_cast<char*>(&master_),
          reinterpret_cast<char*>(&other->master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupListInit::InitAsDefaultInstance() {
  ::phxgrouplist::_GroupListInit_default_instance_._instance.get_mutable()->master_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
  ::phxgrouplist::_GroupListInit_default_instance_._instance.get_mutable()->init_grouplist_ = const_cast< ::phxgrouplist::GroupList*>(
      ::phxgrouplist::GroupList::internal_default_instance());
}
class GroupListInit::_Internal {
 public:
  static const ::phxgrouplist::NodeInfo& master(const GroupListInit* msg);
  static const ::phxgrouplist::GroupList& init_grouplist(const GroupListInit* msg);
};

const ::phxgrouplist::NodeInfo&
GroupListInit::_Internal::master(const GroupListInit* msg) {
  return *msg->master_;
}
const ::phxgrouplist::GroupList&
GroupListInit::_Internal::init_grouplist(const GroupListInit* msg) {
  return *msg->init_grouplist_;
}
GroupListInit::GroupListInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.GroupListInit)
}
GroupListInit::GroupListInit(const GroupListInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_master()) {
    master_ = new ::phxgrouplist::NodeInfo(*from.master_);
  } else {
    master_ = nullptr;
  }
  if (from._internal_has_init_grouplist()) {
    init_grouplist_ = new ::phxgrouplist::GroupList(*from.init_grouplist_);
  } else {
    init_grouplist_ = nullptr;
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.GroupListInit)
}

void GroupListInit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupListInit_GroupListMess_2eproto.base);
  ::memset(&master_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&master_)) + sizeof(epoch_));
}

GroupListInit::~GroupListInit() {
  // @@protoc_insertion_point(destructor:phxgrouplist.GroupListInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupListInit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete master_;
  if (this != internal_default_instance()) delete init_grouplist_;
}

void GroupListInit::ArenaDtor(void* object) {
  GroupListInit* _this = reinterpret_cast< GroupListInit* >(object);
  (void)_this;
}
void GroupListInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupListInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupListInit& GroupListInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupListInit_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void GroupListInit::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.GroupListInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
  if (GetArena() == nullptr && init_grouplist_ != nullptr) {
    delete init_grouplist_;
  }
  init_grouplist_ = nullptr;
  epoch_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupListInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo Master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.GroupList init_grouplist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_grouplist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupListInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.GroupListInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_epoch(), target);
  }

  // .phxgrouplist.NodeInfo Master = 2;
  if (this->has_master()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::master(this), target, stream);
  }

  // .phxgrouplist.GroupList init_grouplist = 3;
  if (this->has_init_grouplist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::init_grouplist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.GroupListInit)
  return target;
}

size_t GroupListInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.GroupListInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phxgrouplist.NodeInfo Master = 2;
  if (this->has_master()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *master_);
  }

  // .phxgrouplist.GroupList init_grouplist = 3;
  if (this->has_init_grouplist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *init_grouplist_);
  }

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupListInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.GroupListInit)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupListInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupListInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.GroupListInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.GroupListInit)
    MergeFrom(*source);
  }
}

void GroupListInit::MergeFrom(const GroupListInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.GroupListInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_master()) {
    _internal_mutable_master()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_master());
  }
  if (from.has_init_grouplist()) {
    _internal_mutable_init_grouplist()->::phxgrouplist::GroupList::MergeFrom(from._internal_init_grouplist());
  }
  if (from.epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
}

void GroupListInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.GroupListInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupListInit::CopyFrom(const GroupListInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.GroupListInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupListInit::IsInitialized() const {
  return true;
}

void GroupListInit::InternalSwap(GroupListInit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupListInit, epoch_)
      + sizeof(GroupListInit::epoch_)
      - PROTOBUF_FIELD_OFFSET(GroupListInit, master_)>(
          reinterpret_cast<char*>(&master_),
          reinterpret_cast<char*>(&other->master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupListInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GrouplistAdd::InitAsDefaultInstance() {
  ::phxgrouplist::_GrouplistAdd_default_instance_._instance.get_mutable()->master_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
  ::phxgrouplist::_GrouplistAdd_default_instance_._instance.get_mutable()->group_leader_addto_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
  ::phxgrouplist::_GrouplistAdd_default_instance_._instance.get_mutable()->new_node_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
}
class GrouplistAdd::_Internal {
 public:
  static const ::phxgrouplist::NodeInfo& master(const GrouplistAdd* msg);
  static const ::phxgrouplist::NodeInfo& group_leader_addto(const GrouplistAdd* msg);
  static const ::phxgrouplist::NodeInfo& new_node(const GrouplistAdd* msg);
};

const ::phxgrouplist::NodeInfo&
GrouplistAdd::_Internal::master(const GrouplistAdd* msg) {
  return *msg->master_;
}
const ::phxgrouplist::NodeInfo&
GrouplistAdd::_Internal::group_leader_addto(const GrouplistAdd* msg) {
  return *msg->group_leader_addto_;
}
const ::phxgrouplist::NodeInfo&
GrouplistAdd::_Internal::new_node(const GrouplistAdd* msg) {
  return *msg->new_node_;
}
GrouplistAdd::GrouplistAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.GrouplistAdd)
}
GrouplistAdd::GrouplistAdd(const GrouplistAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_master()) {
    master_ = new ::phxgrouplist::NodeInfo(*from.master_);
  } else {
    master_ = nullptr;
  }
  if (from._internal_has_group_leader_addto()) {
    group_leader_addto_ = new ::phxgrouplist::NodeInfo(*from.group_leader_addto_);
  } else {
    group_leader_addto_ = nullptr;
  }
  if (from._internal_has_new_node()) {
    new_node_ = new ::phxgrouplist::NodeInfo(*from.new_node_);
  } else {
    new_node_ = nullptr;
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.GrouplistAdd)
}

void GrouplistAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrouplistAdd_GroupListMess_2eproto.base);
  ::memset(&master_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&master_)) + sizeof(epoch_));
}

GrouplistAdd::~GrouplistAdd() {
  // @@protoc_insertion_point(destructor:phxgrouplist.GrouplistAdd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GrouplistAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete master_;
  if (this != internal_default_instance()) delete group_leader_addto_;
  if (this != internal_default_instance()) delete new_node_;
}

void GrouplistAdd::ArenaDtor(void* object) {
  GrouplistAdd* _this = reinterpret_cast< GrouplistAdd* >(object);
  (void)_this;
}
void GrouplistAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrouplistAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrouplistAdd& GrouplistAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrouplistAdd_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void GrouplistAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.GrouplistAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
  if (GetArena() == nullptr && group_leader_addto_ != nullptr) {
    delete group_leader_addto_;
  }
  group_leader_addto_ = nullptr;
  if (GetArena() == nullptr && new_node_ != nullptr) {
    delete new_node_;
  }
  new_node_ = nullptr;
  epoch_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrouplistAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo Master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo group_leader_addto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_leader_addto(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo new_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GrouplistAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.GrouplistAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_epoch(), target);
  }

  // .phxgrouplist.NodeInfo Master = 2;
  if (this->has_master()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::master(this), target, stream);
  }

  // .phxgrouplist.NodeInfo group_leader_addto = 3;
  if (this->has_group_leader_addto()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group_leader_addto(this), target, stream);
  }

  // .phxgrouplist.NodeInfo new_node = 4;
  if (this->has_new_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::new_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.GrouplistAdd)
  return target;
}

size_t GrouplistAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.GrouplistAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phxgrouplist.NodeInfo Master = 2;
  if (this->has_master()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *master_);
  }

  // .phxgrouplist.NodeInfo group_leader_addto = 3;
  if (this->has_group_leader_addto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_leader_addto_);
  }

  // .phxgrouplist.NodeInfo new_node = 4;
  if (this->has_new_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_node_);
  }

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrouplistAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.GrouplistAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const GrouplistAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrouplistAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.GrouplistAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.GrouplistAdd)
    MergeFrom(*source);
  }
}

void GrouplistAdd::MergeFrom(const GrouplistAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.GrouplistAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_master()) {
    _internal_mutable_master()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_master());
  }
  if (from.has_group_leader_addto()) {
    _internal_mutable_group_leader_addto()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_group_leader_addto());
  }
  if (from.has_new_node()) {
    _internal_mutable_new_node()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_new_node());
  }
  if (from.epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
}

void GrouplistAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.GrouplistAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrouplistAdd::CopyFrom(const GrouplistAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.GrouplistAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrouplistAdd::IsInitialized() const {
  return true;
}

void GrouplistAdd::InternalSwap(GrouplistAdd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrouplistAdd, epoch_)
      + sizeof(GrouplistAdd::epoch_)
      - PROTOBUF_FIELD_OFFSET(GrouplistAdd, master_)>(
          reinterpret_cast<char*>(&master_),
          reinterpret_cast<char*>(&other->master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrouplistAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupListRemove::InitAsDefaultInstance() {
  ::phxgrouplist::_GroupListRemove_default_instance_._instance.get_mutable()->master_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
  ::phxgrouplist::_GroupListRemove_default_instance_._instance.get_mutable()->group_oldleader_removefrom_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
  ::phxgrouplist::_GroupListRemove_default_instance_._instance.get_mutable()->group_newleader_removefrom_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
  ::phxgrouplist::_GroupListRemove_default_instance_._instance.get_mutable()->remove_node_ = const_cast< ::phxgrouplist::NodeInfo*>(
      ::phxgrouplist::NodeInfo::internal_default_instance());
}
class GroupListRemove::_Internal {
 public:
  static const ::phxgrouplist::NodeInfo& master(const GroupListRemove* msg);
  static const ::phxgrouplist::NodeInfo& group_oldleader_removefrom(const GroupListRemove* msg);
  static const ::phxgrouplist::NodeInfo& group_newleader_removefrom(const GroupListRemove* msg);
  static const ::phxgrouplist::NodeInfo& remove_node(const GroupListRemove* msg);
};

const ::phxgrouplist::NodeInfo&
GroupListRemove::_Internal::master(const GroupListRemove* msg) {
  return *msg->master_;
}
const ::phxgrouplist::NodeInfo&
GroupListRemove::_Internal::group_oldleader_removefrom(const GroupListRemove* msg) {
  return *msg->group_oldleader_removefrom_;
}
const ::phxgrouplist::NodeInfo&
GroupListRemove::_Internal::group_newleader_removefrom(const GroupListRemove* msg) {
  return *msg->group_newleader_removefrom_;
}
const ::phxgrouplist::NodeInfo&
GroupListRemove::_Internal::remove_node(const GroupListRemove* msg) {
  return *msg->remove_node_;
}
GroupListRemove::GroupListRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.GroupListRemove)
}
GroupListRemove::GroupListRemove(const GroupListRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_master()) {
    master_ = new ::phxgrouplist::NodeInfo(*from.master_);
  } else {
    master_ = nullptr;
  }
  if (from._internal_has_group_oldleader_removefrom()) {
    group_oldleader_removefrom_ = new ::phxgrouplist::NodeInfo(*from.group_oldleader_removefrom_);
  } else {
    group_oldleader_removefrom_ = nullptr;
  }
  if (from._internal_has_group_newleader_removefrom()) {
    group_newleader_removefrom_ = new ::phxgrouplist::NodeInfo(*from.group_newleader_removefrom_);
  } else {
    group_newleader_removefrom_ = nullptr;
  }
  if (from._internal_has_remove_node()) {
    remove_node_ = new ::phxgrouplist::NodeInfo(*from.remove_node_);
  } else {
    remove_node_ = nullptr;
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.GroupListRemove)
}

void GroupListRemove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupListRemove_GroupListMess_2eproto.base);
  ::memset(&master_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&master_)) + sizeof(epoch_));
}

GroupListRemove::~GroupListRemove() {
  // @@protoc_insertion_point(destructor:phxgrouplist.GroupListRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupListRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete master_;
  if (this != internal_default_instance()) delete group_oldleader_removefrom_;
  if (this != internal_default_instance()) delete group_newleader_removefrom_;
  if (this != internal_default_instance()) delete remove_node_;
}

void GroupListRemove::ArenaDtor(void* object) {
  GroupListRemove* _this = reinterpret_cast< GroupListRemove* >(object);
  (void)_this;
}
void GroupListRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupListRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupListRemove& GroupListRemove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupListRemove_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void GroupListRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.GroupListRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
  if (GetArena() == nullptr && group_oldleader_removefrom_ != nullptr) {
    delete group_oldleader_removefrom_;
  }
  group_oldleader_removefrom_ = nullptr;
  if (GetArena() == nullptr && group_newleader_removefrom_ != nullptr) {
    delete group_newleader_removefrom_;
  }
  group_newleader_removefrom_ = nullptr;
  if (GetArena() == nullptr && remove_node_ != nullptr) {
    delete remove_node_;
  }
  remove_node_ = nullptr;
  epoch_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupListRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo Master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo group_oldleader_removefrom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_oldleader_removefrom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo group_newleader_removefrom = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_newleader_removefrom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.NodeInfo remove_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupListRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.GroupListRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_epoch(), target);
  }

  // .phxgrouplist.NodeInfo Master = 2;
  if (this->has_master()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::master(this), target, stream);
  }

  // .phxgrouplist.NodeInfo group_oldleader_removefrom = 3;
  if (this->has_group_oldleader_removefrom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group_oldleader_removefrom(this), target, stream);
  }

  // .phxgrouplist.NodeInfo group_newleader_removefrom = 4;
  if (this->has_group_newleader_removefrom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::group_newleader_removefrom(this), target, stream);
  }

  // .phxgrouplist.NodeInfo remove_node = 5;
  if (this->has_remove_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::remove_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.GroupListRemove)
  return target;
}

size_t GroupListRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.GroupListRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phxgrouplist.NodeInfo Master = 2;
  if (this->has_master()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *master_);
  }

  // .phxgrouplist.NodeInfo group_oldleader_removefrom = 3;
  if (this->has_group_oldleader_removefrom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_oldleader_removefrom_);
  }

  // .phxgrouplist.NodeInfo group_newleader_removefrom = 4;
  if (this->has_group_newleader_removefrom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_newleader_removefrom_);
  }

  // .phxgrouplist.NodeInfo remove_node = 5;
  if (this->has_remove_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remove_node_);
  }

  // uint32 epoch = 1;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupListRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.GroupListRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupListRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupListRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.GroupListRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.GroupListRemove)
    MergeFrom(*source);
  }
}

void GroupListRemove::MergeFrom(const GroupListRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.GroupListRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_master()) {
    _internal_mutable_master()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_master());
  }
  if (from.has_group_oldleader_removefrom()) {
    _internal_mutable_group_oldleader_removefrom()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_group_oldleader_removefrom());
  }
  if (from.has_group_newleader_removefrom()) {
    _internal_mutable_group_newleader_removefrom()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_group_newleader_removefrom());
  }
  if (from.has_remove_node()) {
    _internal_mutable_remove_node()->::phxgrouplist::NodeInfo::MergeFrom(from._internal_remove_node());
  }
  if (from.epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
}

void GroupListRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.GroupListRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupListRemove::CopyFrom(const GroupListRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.GroupListRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupListRemove::IsInitialized() const {
  return true;
}

void GroupListRemove::InternalSwap(GroupListRemove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupListRemove, epoch_)
      + sizeof(GroupListRemove::epoch_)
      - PROTOBUF_FIELD_OFFSET(GroupListRemove, master_)>(
          reinterpret_cast<char*>(&master_),
          reinterpret_cast<char*>(&other->master_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupListRemove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GrouplistMess::InitAsDefaultInstance() {
  ::phxgrouplist::_GrouplistMess_default_instance_._instance.get_mutable()->gl_init_ = const_cast< ::phxgrouplist::GroupListInit*>(
      ::phxgrouplist::GroupListInit::internal_default_instance());
  ::phxgrouplist::_GrouplistMess_default_instance_._instance.get_mutable()->gl_add_ = const_cast< ::phxgrouplist::GrouplistAdd*>(
      ::phxgrouplist::GrouplistAdd::internal_default_instance());
  ::phxgrouplist::_GrouplistMess_default_instance_._instance.get_mutable()->gl_remove_ = const_cast< ::phxgrouplist::GroupListRemove*>(
      ::phxgrouplist::GroupListRemove::internal_default_instance());
}
class GrouplistMess::_Internal {
 public:
  static const ::phxgrouplist::GroupListInit& gl_init(const GrouplistMess* msg);
  static const ::phxgrouplist::GrouplistAdd& gl_add(const GrouplistMess* msg);
  static const ::phxgrouplist::GroupListRemove& gl_remove(const GrouplistMess* msg);
};

const ::phxgrouplist::GroupListInit&
GrouplistMess::_Internal::gl_init(const GrouplistMess* msg) {
  return *msg->gl_init_;
}
const ::phxgrouplist::GrouplistAdd&
GrouplistMess::_Internal::gl_add(const GrouplistMess* msg) {
  return *msg->gl_add_;
}
const ::phxgrouplist::GroupListRemove&
GrouplistMess::_Internal::gl_remove(const GrouplistMess* msg) {
  return *msg->gl_remove_;
}
GrouplistMess::GrouplistMess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.GrouplistMess)
}
GrouplistMess::GrouplistMess(const GrouplistMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gl_init()) {
    gl_init_ = new ::phxgrouplist::GroupListInit(*from.gl_init_);
  } else {
    gl_init_ = nullptr;
  }
  if (from._internal_has_gl_add()) {
    gl_add_ = new ::phxgrouplist::GrouplistAdd(*from.gl_add_);
  } else {
    gl_add_ = nullptr;
  }
  if (from._internal_has_gl_remove()) {
    gl_remove_ = new ::phxgrouplist::GroupListRemove(*from.gl_remove_);
  } else {
    gl_remove_ = nullptr;
  }
  ::memcpy(&op_type_, &from.op_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&op_type_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.GrouplistMess)
}

void GrouplistMess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrouplistMess_GroupListMess_2eproto.base);
  ::memset(&gl_init_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&gl_init_)) + sizeof(epoch_));
}

GrouplistMess::~GrouplistMess() {
  // @@protoc_insertion_point(destructor:phxgrouplist.GrouplistMess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GrouplistMess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gl_init_;
  if (this != internal_default_instance()) delete gl_add_;
  if (this != internal_default_instance()) delete gl_remove_;
}

void GrouplistMess::ArenaDtor(void* object) {
  GrouplistMess* _this = reinterpret_cast< GrouplistMess* >(object);
  (void)_this;
}
void GrouplistMess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GrouplistMess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrouplistMess& GrouplistMess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrouplistMess_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void GrouplistMess::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.GrouplistMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gl_init_ != nullptr) {
    delete gl_init_;
  }
  gl_init_ = nullptr;
  if (GetArena() == nullptr && gl_add_ != nullptr) {
    delete gl_add_;
  }
  gl_add_ = nullptr;
  if (GetArena() == nullptr && gl_remove_ != nullptr) {
    delete gl_remove_;
  }
  gl_remove_ = nullptr;
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(epoch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrouplistMess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phxgrouplist.GrouplistMess.op_types op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op_type(static_cast<::phxgrouplist::GrouplistMess_op_types>(val));
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.GroupListInit gl_init = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gl_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.GrouplistAdd gl_add = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gl_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxgrouplist.GroupListRemove gl_remove = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gl_remove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 epoch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GrouplistMess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.GrouplistMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phxgrouplist.GrouplistMess.op_types op_type = 1;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op_type(), target);
  }

  // .phxgrouplist.GroupListInit gl_init = 2;
  if (this->has_gl_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gl_init(this), target, stream);
  }

  // .phxgrouplist.GrouplistAdd gl_add = 3;
  if (this->has_gl_add()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gl_add(this), target, stream);
  }

  // .phxgrouplist.GroupListRemove gl_remove = 4;
  if (this->has_gl_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gl_remove(this), target, stream);
  }

  // uint32 epoch = 5;
  if (this->epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.GrouplistMess)
  return target;
}

size_t GrouplistMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.GrouplistMess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phxgrouplist.GroupListInit gl_init = 2;
  if (this->has_gl_init()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gl_init_);
  }

  // .phxgrouplist.GrouplistAdd gl_add = 3;
  if (this->has_gl_add()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gl_add_);
  }

  // .phxgrouplist.GroupListRemove gl_remove = 4;
  if (this->has_gl_remove()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gl_remove_);
  }

  // .phxgrouplist.GrouplistMess.op_types op_type = 1;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op_type());
  }

  // uint32 epoch = 5;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrouplistMess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.GrouplistMess)
  GOOGLE_DCHECK_NE(&from, this);
  const GrouplistMess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrouplistMess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.GrouplistMess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.GrouplistMess)
    MergeFrom(*source);
  }
}

void GrouplistMess::MergeFrom(const GrouplistMess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.GrouplistMess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gl_init()) {
    _internal_mutable_gl_init()->::phxgrouplist::GroupListInit::MergeFrom(from._internal_gl_init());
  }
  if (from.has_gl_add()) {
    _internal_mutable_gl_add()->::phxgrouplist::GrouplistAdd::MergeFrom(from._internal_gl_add());
  }
  if (from.has_gl_remove()) {
    _internal_mutable_gl_remove()->::phxgrouplist::GroupListRemove::MergeFrom(from._internal_gl_remove());
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
  if (from.epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
}

void GrouplistMess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.GrouplistMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrouplistMess::CopyFrom(const GrouplistMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.GrouplistMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrouplistMess::IsInitialized() const {
  return true;
}

void GrouplistMess::InternalSwap(GrouplistMess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrouplistMess, epoch_)
      + sizeof(GrouplistMess::epoch_)
      - PROTOBUF_FIELD_OFFSET(GrouplistMess, gl_init_)>(
          reinterpret_cast<char*>(&gl_init_),
          reinterpret_cast<char*>(&other->gl_init_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrouplistMess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeadersChangeMess::InitAsDefaultInstance() {
}
class LeadersChangeMess::_Internal {
 public:
};

LeadersChangeMess::LeadersChangeMess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leaders_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.LeadersChangeMess)
}
LeadersChangeMess::LeadersChangeMess(const LeadersChangeMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leaders_(from.leaders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_type_, &from.op_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&op_type_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.LeadersChangeMess)
}

void LeadersChangeMess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeadersChangeMess_GroupListMess_2eproto.base);
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(epoch_));
}

LeadersChangeMess::~LeadersChangeMess() {
  // @@protoc_insertion_point(destructor:phxgrouplist.LeadersChangeMess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeadersChangeMess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeadersChangeMess::ArenaDtor(void* object) {
  LeadersChangeMess* _this = reinterpret_cast< LeadersChangeMess* >(object);
  (void)_this;
}
void LeadersChangeMess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeadersChangeMess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeadersChangeMess& LeadersChangeMess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeadersChangeMess_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void LeadersChangeMess::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.LeadersChangeMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leaders_.Clear();
  ::memset(&op_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&op_type_)) + sizeof(epoch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeadersChangeMess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .phxgrouplist.LeadersChangeMess.op_types op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op_type(static_cast<::phxgrouplist::LeadersChangeMess_op_types>(val));
        } else goto handle_unusual;
        continue;
      // uint32 epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .phxgrouplist.NodeInfo leaders = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeadersChangeMess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.LeadersChangeMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .phxgrouplist.LeadersChangeMess.op_types op_type = 1;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op_type(), target);
  }

  // uint32 epoch = 2;
  if (this->epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_epoch(), target);
  }

  // repeated .phxgrouplist.NodeInfo leaders = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leaders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.LeadersChangeMess)
  return target;
}

size_t LeadersChangeMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.LeadersChangeMess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .phxgrouplist.NodeInfo leaders = 3;
  total_size += 1UL * this->_internal_leaders_size();
  for (const auto& msg : this->leaders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .phxgrouplist.LeadersChangeMess.op_types op_type = 1;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op_type());
  }

  // uint32 epoch = 2;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epoch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeadersChangeMess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.LeadersChangeMess)
  GOOGLE_DCHECK_NE(&from, this);
  const LeadersChangeMess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeadersChangeMess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.LeadersChangeMess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.LeadersChangeMess)
    MergeFrom(*source);
  }
}

void LeadersChangeMess::MergeFrom(const LeadersChangeMess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.LeadersChangeMess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leaders_.MergeFrom(from.leaders_);
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
  if (from.epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
}

void LeadersChangeMess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.LeadersChangeMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeadersChangeMess::CopyFrom(const LeadersChangeMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.LeadersChangeMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeadersChangeMess::IsInitialized() const {
  return true;
}

void LeadersChangeMess::InternalSwap(LeadersChangeMess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leaders_.InternalSwap(&other->leaders_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeadersChangeMess, epoch_)
      + sizeof(LeadersChangeMess::epoch_)
      - PROTOBUF_FIELD_OFFSET(LeadersChangeMess, op_type_)>(
          reinterpret_cast<char*>(&op_type_),
          reinterpret_cast<char*>(&other->op_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeadersChangeMess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeStorageMess::InitAsDefaultInstance() {
}
class NodeStorageMess::_Internal {
 public:
};

NodeStorageMess::NodeStorageMess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxgrouplist.NodeStorageMess)
}
NodeStorageMess::NodeStorageMess(const NodeStorageMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(remaining_));
  // @@protoc_insertion_point(copy_constructor:phxgrouplist.NodeStorageMess)
}

void NodeStorageMess::SharedCtor() {
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(remaining_));
}

NodeStorageMess::~NodeStorageMess() {
  // @@protoc_insertion_point(destructor:phxgrouplist.NodeStorageMess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeStorageMess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeStorageMess::ArenaDtor(void* object) {
  NodeStorageMess* _this = reinterpret_cast< NodeStorageMess* >(object);
  (void)_this;
}
void NodeStorageMess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeStorageMess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeStorageMess& NodeStorageMess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeStorageMess_GroupListMess_2eproto.base);
  return *internal_default_instance();
}


void NodeStorageMess::Clear() {
// @@protoc_insertion_point(message_clear_start:phxgrouplist.NodeStorageMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(remaining_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeStorageMess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dfs_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dfs_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeStorageMess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxgrouplist.NodeStorageMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 capacity = 1;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_capacity(), target);
  }

  // uint64 dfs_used = 2;
  if (this->dfs_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_dfs_used(), target);
  }

  // uint64 remaining = 3;
  if (this->remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxgrouplist.NodeStorageMess)
  return target;
}

size_t NodeStorageMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxgrouplist.NodeStorageMess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 capacity = 1;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_capacity());
  }

  // uint64 dfs_used = 2;
  if (this->dfs_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dfs_used());
  }

  // uint64 remaining = 3;
  if (this->remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remaining());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeStorageMess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxgrouplist.NodeStorageMess)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStorageMess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeStorageMess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxgrouplist.NodeStorageMess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxgrouplist.NodeStorageMess)
    MergeFrom(*source);
  }
}

void NodeStorageMess::MergeFrom(const NodeStorageMess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxgrouplist.NodeStorageMess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.dfs_used() != 0) {
    _internal_set_dfs_used(from._internal_dfs_used());
  }
  if (from.remaining() != 0) {
    _internal_set_remaining(from._internal_remaining());
  }
}

void NodeStorageMess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxgrouplist.NodeStorageMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStorageMess::CopyFrom(const NodeStorageMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxgrouplist.NodeStorageMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStorageMess::IsInitialized() const {
  return true;
}

void NodeStorageMess::InternalSwap(NodeStorageMess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeStorageMess, remaining_)
      + sizeof(NodeStorageMess::remaining_)
      - PROTOBUF_FIELD_OFFSET(NodeStorageMess, capacity_)>(
          reinterpret_cast<char*>(&capacity_),
          reinterpret_cast<char*>(&other->capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeStorageMess::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace phxgrouplist
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phxgrouplist::NodeInfo* Arena::CreateMaybeMessage< ::phxgrouplist::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::phxgrouplist::GroupInfo* Arena::CreateMaybeMessage< ::phxgrouplist::GroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::GroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::phxgrouplist::GroupList* Arena::CreateMaybeMessage< ::phxgrouplist::GroupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::GroupList >(arena);
}
template<> PROTOBUF_NOINLINE ::phxgrouplist::GroupListInit* Arena::CreateMaybeMessage< ::phxgrouplist::GroupListInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::GroupListInit >(arena);
}
template<> PROTOBUF_NOINLINE ::phxgrouplist::GrouplistAdd* Arena::CreateMaybeMessage< ::phxgrouplist::GrouplistAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::GrouplistAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::phxgrouplist::GroupListRemove* Arena::CreateMaybeMessage< ::phxgrouplist::GroupListRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::GroupListRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::phxgrouplist::GrouplistMess* Arena::CreateMaybeMessage< ::phxgrouplist::GrouplistMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::GrouplistMess >(arena);
}
template<> PROTOBUF_NOINLINE ::phxgrouplist::LeadersChangeMess* Arena::CreateMaybeMessage< ::phxgrouplist::LeadersChangeMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::LeadersChangeMess >(arena);
}
template<> PROTOBUF_NOINLINE ::phxgrouplist::NodeStorageMess* Arena::CreateMaybeMessage< ::phxgrouplist::NodeStorageMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxgrouplist::NodeStorageMess >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
