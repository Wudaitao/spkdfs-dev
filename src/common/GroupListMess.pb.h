// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupListMess.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GroupListMess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GroupListMess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GroupListMess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GroupListMess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GroupListMess_2eproto;
namespace phxgrouplist {
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupList;
class GroupListDefaultTypeInternal;
extern GroupListDefaultTypeInternal _GroupList_default_instance_;
class GroupListInit;
class GroupListInitDefaultTypeInternal;
extern GroupListInitDefaultTypeInternal _GroupListInit_default_instance_;
class GroupListRemove;
class GroupListRemoveDefaultTypeInternal;
extern GroupListRemoveDefaultTypeInternal _GroupListRemove_default_instance_;
class GrouplistAdd;
class GrouplistAddDefaultTypeInternal;
extern GrouplistAddDefaultTypeInternal _GrouplistAdd_default_instance_;
class GrouplistMess;
class GrouplistMessDefaultTypeInternal;
extern GrouplistMessDefaultTypeInternal _GrouplistMess_default_instance_;
class LeadersChangeMess;
class LeadersChangeMessDefaultTypeInternal;
extern LeadersChangeMessDefaultTypeInternal _LeadersChangeMess_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeStorageMess;
class NodeStorageMessDefaultTypeInternal;
extern NodeStorageMessDefaultTypeInternal _NodeStorageMess_default_instance_;
}  // namespace phxgrouplist
PROTOBUF_NAMESPACE_OPEN
template<> ::phxgrouplist::GroupInfo* Arena::CreateMaybeMessage<::phxgrouplist::GroupInfo>(Arena*);
template<> ::phxgrouplist::GroupList* Arena::CreateMaybeMessage<::phxgrouplist::GroupList>(Arena*);
template<> ::phxgrouplist::GroupListInit* Arena::CreateMaybeMessage<::phxgrouplist::GroupListInit>(Arena*);
template<> ::phxgrouplist::GroupListRemove* Arena::CreateMaybeMessage<::phxgrouplist::GroupListRemove>(Arena*);
template<> ::phxgrouplist::GrouplistAdd* Arena::CreateMaybeMessage<::phxgrouplist::GrouplistAdd>(Arena*);
template<> ::phxgrouplist::GrouplistMess* Arena::CreateMaybeMessage<::phxgrouplist::GrouplistMess>(Arena*);
template<> ::phxgrouplist::LeadersChangeMess* Arena::CreateMaybeMessage<::phxgrouplist::LeadersChangeMess>(Arena*);
template<> ::phxgrouplist::NodeInfo* Arena::CreateMaybeMessage<::phxgrouplist::NodeInfo>(Arena*);
template<> ::phxgrouplist::NodeStorageMess* Arena::CreateMaybeMessage<::phxgrouplist::NodeStorageMess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phxgrouplist {

enum GroupList_st_type : int {
  GroupList_st_type_GROUP_BUILD = 0,
  GroupList_st_type_GroupList_st_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GroupList_st_type_GroupList_st_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GroupList_st_type_IsValid(int value);
constexpr GroupList_st_type GroupList_st_type_st_type_MIN = GroupList_st_type_GROUP_BUILD;
constexpr GroupList_st_type GroupList_st_type_st_type_MAX = GroupList_st_type_GROUP_BUILD;
constexpr int GroupList_st_type_st_type_ARRAYSIZE = GroupList_st_type_st_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupList_st_type_descriptor();
template<typename T>
inline const std::string& GroupList_st_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupList_st_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupList_st_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupList_st_type_descriptor(), enum_t_value);
}
inline bool GroupList_st_type_Parse(
    const std::string& name, GroupList_st_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupList_st_type>(
    GroupList_st_type_descriptor(), name, value);
}
enum GrouplistMess_op_types : int {
  GrouplistMess_op_types_GL_INIT = 0,
  GrouplistMess_op_types_GL_ADD = 1,
  GrouplistMess_op_types_GL_REMOVE = 2,
  GrouplistMess_op_types_GL_SHUTDOWN = 3,
  GrouplistMess_op_types_GL_KILLNODE = 4,
  GrouplistMess_op_types_GrouplistMess_op_types_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GrouplistMess_op_types_GrouplistMess_op_types_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GrouplistMess_op_types_IsValid(int value);
constexpr GrouplistMess_op_types GrouplistMess_op_types_op_types_MIN = GrouplistMess_op_types_GL_INIT;
constexpr GrouplistMess_op_types GrouplistMess_op_types_op_types_MAX = GrouplistMess_op_types_GL_KILLNODE;
constexpr int GrouplistMess_op_types_op_types_ARRAYSIZE = GrouplistMess_op_types_op_types_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrouplistMess_op_types_descriptor();
template<typename T>
inline const std::string& GrouplistMess_op_types_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GrouplistMess_op_types>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GrouplistMess_op_types_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GrouplistMess_op_types_descriptor(), enum_t_value);
}
inline bool GrouplistMess_op_types_Parse(
    const std::string& name, GrouplistMess_op_types* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GrouplistMess_op_types>(
    GrouplistMess_op_types_descriptor(), name, value);
}
enum LeadersChangeMess_op_types : int {
  LeadersChangeMess_op_types_LC_INIT = 0,
  LeadersChangeMess_op_types_LC_ADD = 1,
  LeadersChangeMess_op_types_LC_REMOVE = 2,
  LeadersChangeMess_op_types_LC_REPLACE = 3,
  LeadersChangeMess_op_types_LeadersChangeMess_op_types_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LeadersChangeMess_op_types_LeadersChangeMess_op_types_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LeadersChangeMess_op_types_IsValid(int value);
constexpr LeadersChangeMess_op_types LeadersChangeMess_op_types_op_types_MIN = LeadersChangeMess_op_types_LC_INIT;
constexpr LeadersChangeMess_op_types LeadersChangeMess_op_types_op_types_MAX = LeadersChangeMess_op_types_LC_REPLACE;
constexpr int LeadersChangeMess_op_types_op_types_ARRAYSIZE = LeadersChangeMess_op_types_op_types_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeadersChangeMess_op_types_descriptor();
template<typename T>
inline const std::string& LeadersChangeMess_op_types_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LeadersChangeMess_op_types>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LeadersChangeMess_op_types_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LeadersChangeMess_op_types_descriptor(), enum_t_value);
}
inline bool LeadersChangeMess_op_types_Parse(
    const std::string& name, LeadersChangeMess_op_types* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LeadersChangeMess_op_types>(
    LeadersChangeMess_op_types_descriptor(), name, value);
}
// ===================================================================

class NodeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.NodeInfo) */ {
 public:
  inline NodeInfo() : NodeInfo(nullptr) {};
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.NodeInfo";
  }
  protected:
  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIpFieldNumber = 2,
    kNodePortFieldNumber = 1,
  };
  // string nodeIp = 2;
  void clear_nodeip();
  const std::string& nodeip() const;
  void set_nodeip(const std::string& value);
  void set_nodeip(std::string&& value);
  void set_nodeip(const char* value);
  void set_nodeip(const char* value, size_t size);
  std::string* mutable_nodeip();
  std::string* release_nodeip();
  void set_allocated_nodeip(std::string* nodeip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nodeip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nodeip(
      std::string* nodeip);
  private:
  const std::string& _internal_nodeip() const;
  void _internal_set_nodeip(const std::string& value);
  std::string* _internal_mutable_nodeip();
  public:

  // uint32 nodePort = 1;
  void clear_nodeport();
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeport() const;
  void set_nodeport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nodeport() const;
  void _internal_set_nodeport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxgrouplist.NodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.GroupInfo) */ {
 public:
  inline GroupInfo() : GroupInfo(nullptr) {};
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const final {
    return CreateMaybeMessage<GroupInfo>(nullptr);
  }

  GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.GroupInfo";
  }
  protected:
  explicit GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodelistFieldNumber = 2,
    kLeaderFieldNumber = 1,
  };
  // repeated .phxgrouplist.NodeInfo Nodelist = 2;
  int nodelist_size() const;
  private:
  int _internal_nodelist_size() const;
  public:
  void clear_nodelist();
  ::phxgrouplist::NodeInfo* mutable_nodelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo >*
      mutable_nodelist();
  private:
  const ::phxgrouplist::NodeInfo& _internal_nodelist(int index) const;
  ::phxgrouplist::NodeInfo* _internal_add_nodelist();
  public:
  const ::phxgrouplist::NodeInfo& nodelist(int index) const;
  ::phxgrouplist::NodeInfo* add_nodelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo >&
      nodelist() const;

  // .phxgrouplist.NodeInfo leader = 1;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const ::phxgrouplist::NodeInfo& leader() const;
  ::phxgrouplist::NodeInfo* release_leader();
  ::phxgrouplist::NodeInfo* mutable_leader();
  void set_allocated_leader(::phxgrouplist::NodeInfo* leader);
  private:
  const ::phxgrouplist::NodeInfo& _internal_leader() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_leader();
  public:
  void unsafe_arena_set_allocated_leader(
      ::phxgrouplist::NodeInfo* leader);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_leader();

  // @@protoc_insertion_point(class_scope:phxgrouplist.GroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo > nodelist_;
  ::phxgrouplist::NodeInfo* leader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// -------------------------------------------------------------------

class GroupList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.GroupList) */ {
 public:
  inline GroupList() : GroupList(nullptr) {};
  virtual ~GroupList();

  GroupList(const GroupList& from);
  GroupList(GroupList&& from) noexcept
    : GroupList() {
    *this = ::std::move(from);
  }

  inline GroupList& operator=(const GroupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupList& operator=(GroupList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupList* internal_default_instance() {
    return reinterpret_cast<const GroupList*>(
               &_GroupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupList& a, GroupList& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupList* New() const final {
    return CreateMaybeMessage<GroupList>(nullptr);
  }

  GroupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupList& from);
  void MergeFrom(const GroupList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.GroupList";
  }
  protected:
  explicit GroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GroupList_st_type st_type;
  static constexpr st_type GROUP_BUILD =
    GroupList_st_type_GROUP_BUILD;
  static inline bool st_type_IsValid(int value) {
    return GroupList_st_type_IsValid(value);
  }
  static constexpr st_type st_type_MIN =
    GroupList_st_type_st_type_MIN;
  static constexpr st_type st_type_MAX =
    GroupList_st_type_st_type_MAX;
  static constexpr int st_type_ARRAYSIZE =
    GroupList_st_type_st_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  st_type_descriptor() {
    return GroupList_st_type_descriptor();
  }
  template<typename T>
  static inline const std::string& st_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, st_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function st_type_Name.");
    return GroupList_st_type_Name(enum_t_value);
  }
  static inline bool st_type_Parse(const std::string& name,
      st_type* value) {
    return GroupList_st_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 5,
    kMasterFieldNumber = 3,
    kEpochFieldNumber = 2,
    kGroupStatusFieldNumber = 4,
  };
  // repeated .phxgrouplist.GroupInfo groups = 5;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::phxgrouplist::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::GroupInfo >*
      mutable_groups();
  private:
  const ::phxgrouplist::GroupInfo& _internal_groups(int index) const;
  ::phxgrouplist::GroupInfo* _internal_add_groups();
  public:
  const ::phxgrouplist::GroupInfo& groups(int index) const;
  ::phxgrouplist::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::GroupInfo >&
      groups() const;

  // .phxgrouplist.NodeInfo Master = 3;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::phxgrouplist::NodeInfo& master() const;
  ::phxgrouplist::NodeInfo* release_master();
  ::phxgrouplist::NodeInfo* mutable_master();
  void set_allocated_master(::phxgrouplist::NodeInfo* master);
  private:
  const ::phxgrouplist::NodeInfo& _internal_master() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::phxgrouplist::NodeInfo* master);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_master();

  // uint32 epoch = 2;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .phxgrouplist.GroupList.st_type groupStatus = 4;
  void clear_groupstatus();
  ::phxgrouplist::GroupList_st_type groupstatus() const;
  void set_groupstatus(::phxgrouplist::GroupList_st_type value);
  private:
  ::phxgrouplist::GroupList_st_type _internal_groupstatus() const;
  void _internal_set_groupstatus(::phxgrouplist::GroupList_st_type value);
  public:

  // @@protoc_insertion_point(class_scope:phxgrouplist.GroupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::GroupInfo > groups_;
  ::phxgrouplist::NodeInfo* master_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  int groupstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// -------------------------------------------------------------------

class GroupListInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.GroupListInit) */ {
 public:
  inline GroupListInit() : GroupListInit(nullptr) {};
  virtual ~GroupListInit();

  GroupListInit(const GroupListInit& from);
  GroupListInit(GroupListInit&& from) noexcept
    : GroupListInit() {
    *this = ::std::move(from);
  }

  inline GroupListInit& operator=(const GroupListInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupListInit& operator=(GroupListInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupListInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupListInit* internal_default_instance() {
    return reinterpret_cast<const GroupListInit*>(
               &_GroupListInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupListInit& a, GroupListInit& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupListInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupListInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupListInit* New() const final {
    return CreateMaybeMessage<GroupListInit>(nullptr);
  }

  GroupListInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupListInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupListInit& from);
  void MergeFrom(const GroupListInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupListInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.GroupListInit";
  }
  protected:
  explicit GroupListInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterFieldNumber = 2,
    kInitGrouplistFieldNumber = 3,
    kEpochFieldNumber = 1,
  };
  // .phxgrouplist.NodeInfo Master = 2;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::phxgrouplist::NodeInfo& master() const;
  ::phxgrouplist::NodeInfo* release_master();
  ::phxgrouplist::NodeInfo* mutable_master();
  void set_allocated_master(::phxgrouplist::NodeInfo* master);
  private:
  const ::phxgrouplist::NodeInfo& _internal_master() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::phxgrouplist::NodeInfo* master);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_master();

  // .phxgrouplist.GroupList init_grouplist = 3;
  bool has_init_grouplist() const;
  private:
  bool _internal_has_init_grouplist() const;
  public:
  void clear_init_grouplist();
  const ::phxgrouplist::GroupList& init_grouplist() const;
  ::phxgrouplist::GroupList* release_init_grouplist();
  ::phxgrouplist::GroupList* mutable_init_grouplist();
  void set_allocated_init_grouplist(::phxgrouplist::GroupList* init_grouplist);
  private:
  const ::phxgrouplist::GroupList& _internal_init_grouplist() const;
  ::phxgrouplist::GroupList* _internal_mutable_init_grouplist();
  public:
  void unsafe_arena_set_allocated_init_grouplist(
      ::phxgrouplist::GroupList* init_grouplist);
  ::phxgrouplist::GroupList* unsafe_arena_release_init_grouplist();

  // uint32 epoch = 1;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxgrouplist.GroupListInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::phxgrouplist::NodeInfo* master_;
  ::phxgrouplist::GroupList* init_grouplist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// -------------------------------------------------------------------

class GrouplistAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.GrouplistAdd) */ {
 public:
  inline GrouplistAdd() : GrouplistAdd(nullptr) {};
  virtual ~GrouplistAdd();

  GrouplistAdd(const GrouplistAdd& from);
  GrouplistAdd(GrouplistAdd&& from) noexcept
    : GrouplistAdd() {
    *this = ::std::move(from);
  }

  inline GrouplistAdd& operator=(const GrouplistAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrouplistAdd& operator=(GrouplistAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GrouplistAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GrouplistAdd* internal_default_instance() {
    return reinterpret_cast<const GrouplistAdd*>(
               &_GrouplistAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GrouplistAdd& a, GrouplistAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(GrouplistAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrouplistAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GrouplistAdd* New() const final {
    return CreateMaybeMessage<GrouplistAdd>(nullptr);
  }

  GrouplistAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GrouplistAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GrouplistAdd& from);
  void MergeFrom(const GrouplistAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrouplistAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.GrouplistAdd";
  }
  protected:
  explicit GrouplistAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterFieldNumber = 2,
    kGroupLeaderAddtoFieldNumber = 3,
    kNewNodeFieldNumber = 4,
    kEpochFieldNumber = 1,
  };
  // .phxgrouplist.NodeInfo Master = 2;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::phxgrouplist::NodeInfo& master() const;
  ::phxgrouplist::NodeInfo* release_master();
  ::phxgrouplist::NodeInfo* mutable_master();
  void set_allocated_master(::phxgrouplist::NodeInfo* master);
  private:
  const ::phxgrouplist::NodeInfo& _internal_master() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::phxgrouplist::NodeInfo* master);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_master();

  // .phxgrouplist.NodeInfo group_leader_addto = 3;
  bool has_group_leader_addto() const;
  private:
  bool _internal_has_group_leader_addto() const;
  public:
  void clear_group_leader_addto();
  const ::phxgrouplist::NodeInfo& group_leader_addto() const;
  ::phxgrouplist::NodeInfo* release_group_leader_addto();
  ::phxgrouplist::NodeInfo* mutable_group_leader_addto();
  void set_allocated_group_leader_addto(::phxgrouplist::NodeInfo* group_leader_addto);
  private:
  const ::phxgrouplist::NodeInfo& _internal_group_leader_addto() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_group_leader_addto();
  public:
  void unsafe_arena_set_allocated_group_leader_addto(
      ::phxgrouplist::NodeInfo* group_leader_addto);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_group_leader_addto();

  // .phxgrouplist.NodeInfo new_node = 4;
  bool has_new_node() const;
  private:
  bool _internal_has_new_node() const;
  public:
  void clear_new_node();
  const ::phxgrouplist::NodeInfo& new_node() const;
  ::phxgrouplist::NodeInfo* release_new_node();
  ::phxgrouplist::NodeInfo* mutable_new_node();
  void set_allocated_new_node(::phxgrouplist::NodeInfo* new_node);
  private:
  const ::phxgrouplist::NodeInfo& _internal_new_node() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_new_node();
  public:
  void unsafe_arena_set_allocated_new_node(
      ::phxgrouplist::NodeInfo* new_node);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_new_node();

  // uint32 epoch = 1;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxgrouplist.GrouplistAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::phxgrouplist::NodeInfo* master_;
  ::phxgrouplist::NodeInfo* group_leader_addto_;
  ::phxgrouplist::NodeInfo* new_node_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// -------------------------------------------------------------------

class GroupListRemove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.GroupListRemove) */ {
 public:
  inline GroupListRemove() : GroupListRemove(nullptr) {};
  virtual ~GroupListRemove();

  GroupListRemove(const GroupListRemove& from);
  GroupListRemove(GroupListRemove&& from) noexcept
    : GroupListRemove() {
    *this = ::std::move(from);
  }

  inline GroupListRemove& operator=(const GroupListRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupListRemove& operator=(GroupListRemove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupListRemove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupListRemove* internal_default_instance() {
    return reinterpret_cast<const GroupListRemove*>(
               &_GroupListRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupListRemove& a, GroupListRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupListRemove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupListRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupListRemove* New() const final {
    return CreateMaybeMessage<GroupListRemove>(nullptr);
  }

  GroupListRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupListRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupListRemove& from);
  void MergeFrom(const GroupListRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupListRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.GroupListRemove";
  }
  protected:
  explicit GroupListRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterFieldNumber = 2,
    kGroupOldleaderRemovefromFieldNumber = 3,
    kGroupNewleaderRemovefromFieldNumber = 4,
    kRemoveNodeFieldNumber = 5,
    kEpochFieldNumber = 1,
  };
  // .phxgrouplist.NodeInfo Master = 2;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const ::phxgrouplist::NodeInfo& master() const;
  ::phxgrouplist::NodeInfo* release_master();
  ::phxgrouplist::NodeInfo* mutable_master();
  void set_allocated_master(::phxgrouplist::NodeInfo* master);
  private:
  const ::phxgrouplist::NodeInfo& _internal_master() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_master();
  public:
  void unsafe_arena_set_allocated_master(
      ::phxgrouplist::NodeInfo* master);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_master();

  // .phxgrouplist.NodeInfo group_oldleader_removefrom = 3;
  bool has_group_oldleader_removefrom() const;
  private:
  bool _internal_has_group_oldleader_removefrom() const;
  public:
  void clear_group_oldleader_removefrom();
  const ::phxgrouplist::NodeInfo& group_oldleader_removefrom() const;
  ::phxgrouplist::NodeInfo* release_group_oldleader_removefrom();
  ::phxgrouplist::NodeInfo* mutable_group_oldleader_removefrom();
  void set_allocated_group_oldleader_removefrom(::phxgrouplist::NodeInfo* group_oldleader_removefrom);
  private:
  const ::phxgrouplist::NodeInfo& _internal_group_oldleader_removefrom() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_group_oldleader_removefrom();
  public:
  void unsafe_arena_set_allocated_group_oldleader_removefrom(
      ::phxgrouplist::NodeInfo* group_oldleader_removefrom);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_group_oldleader_removefrom();

  // .phxgrouplist.NodeInfo group_newleader_removefrom = 4;
  bool has_group_newleader_removefrom() const;
  private:
  bool _internal_has_group_newleader_removefrom() const;
  public:
  void clear_group_newleader_removefrom();
  const ::phxgrouplist::NodeInfo& group_newleader_removefrom() const;
  ::phxgrouplist::NodeInfo* release_group_newleader_removefrom();
  ::phxgrouplist::NodeInfo* mutable_group_newleader_removefrom();
  void set_allocated_group_newleader_removefrom(::phxgrouplist::NodeInfo* group_newleader_removefrom);
  private:
  const ::phxgrouplist::NodeInfo& _internal_group_newleader_removefrom() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_group_newleader_removefrom();
  public:
  void unsafe_arena_set_allocated_group_newleader_removefrom(
      ::phxgrouplist::NodeInfo* group_newleader_removefrom);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_group_newleader_removefrom();

  // .phxgrouplist.NodeInfo remove_node = 5;
  bool has_remove_node() const;
  private:
  bool _internal_has_remove_node() const;
  public:
  void clear_remove_node();
  const ::phxgrouplist::NodeInfo& remove_node() const;
  ::phxgrouplist::NodeInfo* release_remove_node();
  ::phxgrouplist::NodeInfo* mutable_remove_node();
  void set_allocated_remove_node(::phxgrouplist::NodeInfo* remove_node);
  private:
  const ::phxgrouplist::NodeInfo& _internal_remove_node() const;
  ::phxgrouplist::NodeInfo* _internal_mutable_remove_node();
  public:
  void unsafe_arena_set_allocated_remove_node(
      ::phxgrouplist::NodeInfo* remove_node);
  ::phxgrouplist::NodeInfo* unsafe_arena_release_remove_node();

  // uint32 epoch = 1;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxgrouplist.GroupListRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::phxgrouplist::NodeInfo* master_;
  ::phxgrouplist::NodeInfo* group_oldleader_removefrom_;
  ::phxgrouplist::NodeInfo* group_newleader_removefrom_;
  ::phxgrouplist::NodeInfo* remove_node_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// -------------------------------------------------------------------

class GrouplistMess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.GrouplistMess) */ {
 public:
  inline GrouplistMess() : GrouplistMess(nullptr) {};
  virtual ~GrouplistMess();

  GrouplistMess(const GrouplistMess& from);
  GrouplistMess(GrouplistMess&& from) noexcept
    : GrouplistMess() {
    *this = ::std::move(from);
  }

  inline GrouplistMess& operator=(const GrouplistMess& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrouplistMess& operator=(GrouplistMess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GrouplistMess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GrouplistMess* internal_default_instance() {
    return reinterpret_cast<const GrouplistMess*>(
               &_GrouplistMess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GrouplistMess& a, GrouplistMess& b) {
    a.Swap(&b);
  }
  inline void Swap(GrouplistMess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrouplistMess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GrouplistMess* New() const final {
    return CreateMaybeMessage<GrouplistMess>(nullptr);
  }

  GrouplistMess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GrouplistMess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GrouplistMess& from);
  void MergeFrom(const GrouplistMess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrouplistMess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.GrouplistMess";
  }
  protected:
  explicit GrouplistMess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GrouplistMess_op_types op_types;
  static constexpr op_types GL_INIT =
    GrouplistMess_op_types_GL_INIT;
  static constexpr op_types GL_ADD =
    GrouplistMess_op_types_GL_ADD;
  static constexpr op_types GL_REMOVE =
    GrouplistMess_op_types_GL_REMOVE;
  static constexpr op_types GL_SHUTDOWN =
    GrouplistMess_op_types_GL_SHUTDOWN;
  static constexpr op_types GL_KILLNODE =
    GrouplistMess_op_types_GL_KILLNODE;
  static inline bool op_types_IsValid(int value) {
    return GrouplistMess_op_types_IsValid(value);
  }
  static constexpr op_types op_types_MIN =
    GrouplistMess_op_types_op_types_MIN;
  static constexpr op_types op_types_MAX =
    GrouplistMess_op_types_op_types_MAX;
  static constexpr int op_types_ARRAYSIZE =
    GrouplistMess_op_types_op_types_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  op_types_descriptor() {
    return GrouplistMess_op_types_descriptor();
  }
  template<typename T>
  static inline const std::string& op_types_Name(T enum_t_value) {
    static_assert(::std::is_same<T, op_types>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function op_types_Name.");
    return GrouplistMess_op_types_Name(enum_t_value);
  }
  static inline bool op_types_Parse(const std::string& name,
      op_types* value) {
    return GrouplistMess_op_types_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGlInitFieldNumber = 2,
    kGlAddFieldNumber = 3,
    kGlRemoveFieldNumber = 4,
    kOpTypeFieldNumber = 1,
    kEpochFieldNumber = 5,
  };
  // .phxgrouplist.GroupListInit gl_init = 2;
  bool has_gl_init() const;
  private:
  bool _internal_has_gl_init() const;
  public:
  void clear_gl_init();
  const ::phxgrouplist::GroupListInit& gl_init() const;
  ::phxgrouplist::GroupListInit* release_gl_init();
  ::phxgrouplist::GroupListInit* mutable_gl_init();
  void set_allocated_gl_init(::phxgrouplist::GroupListInit* gl_init);
  private:
  const ::phxgrouplist::GroupListInit& _internal_gl_init() const;
  ::phxgrouplist::GroupListInit* _internal_mutable_gl_init();
  public:
  void unsafe_arena_set_allocated_gl_init(
      ::phxgrouplist::GroupListInit* gl_init);
  ::phxgrouplist::GroupListInit* unsafe_arena_release_gl_init();

  // .phxgrouplist.GrouplistAdd gl_add = 3;
  bool has_gl_add() const;
  private:
  bool _internal_has_gl_add() const;
  public:
  void clear_gl_add();
  const ::phxgrouplist::GrouplistAdd& gl_add() const;
  ::phxgrouplist::GrouplistAdd* release_gl_add();
  ::phxgrouplist::GrouplistAdd* mutable_gl_add();
  void set_allocated_gl_add(::phxgrouplist::GrouplistAdd* gl_add);
  private:
  const ::phxgrouplist::GrouplistAdd& _internal_gl_add() const;
  ::phxgrouplist::GrouplistAdd* _internal_mutable_gl_add();
  public:
  void unsafe_arena_set_allocated_gl_add(
      ::phxgrouplist::GrouplistAdd* gl_add);
  ::phxgrouplist::GrouplistAdd* unsafe_arena_release_gl_add();

  // .phxgrouplist.GroupListRemove gl_remove = 4;
  bool has_gl_remove() const;
  private:
  bool _internal_has_gl_remove() const;
  public:
  void clear_gl_remove();
  const ::phxgrouplist::GroupListRemove& gl_remove() const;
  ::phxgrouplist::GroupListRemove* release_gl_remove();
  ::phxgrouplist::GroupListRemove* mutable_gl_remove();
  void set_allocated_gl_remove(::phxgrouplist::GroupListRemove* gl_remove);
  private:
  const ::phxgrouplist::GroupListRemove& _internal_gl_remove() const;
  ::phxgrouplist::GroupListRemove* _internal_mutable_gl_remove();
  public:
  void unsafe_arena_set_allocated_gl_remove(
      ::phxgrouplist::GroupListRemove* gl_remove);
  ::phxgrouplist::GroupListRemove* unsafe_arena_release_gl_remove();

  // .phxgrouplist.GrouplistMess.op_types op_type = 1;
  void clear_op_type();
  ::phxgrouplist::GrouplistMess_op_types op_type() const;
  void set_op_type(::phxgrouplist::GrouplistMess_op_types value);
  private:
  ::phxgrouplist::GrouplistMess_op_types _internal_op_type() const;
  void _internal_set_op_type(::phxgrouplist::GrouplistMess_op_types value);
  public:

  // uint32 epoch = 5;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxgrouplist.GrouplistMess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::phxgrouplist::GroupListInit* gl_init_;
  ::phxgrouplist::GrouplistAdd* gl_add_;
  ::phxgrouplist::GroupListRemove* gl_remove_;
  int op_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// -------------------------------------------------------------------

class LeadersChangeMess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.LeadersChangeMess) */ {
 public:
  inline LeadersChangeMess() : LeadersChangeMess(nullptr) {};
  virtual ~LeadersChangeMess();

  LeadersChangeMess(const LeadersChangeMess& from);
  LeadersChangeMess(LeadersChangeMess&& from) noexcept
    : LeadersChangeMess() {
    *this = ::std::move(from);
  }

  inline LeadersChangeMess& operator=(const LeadersChangeMess& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeadersChangeMess& operator=(LeadersChangeMess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeadersChangeMess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeadersChangeMess* internal_default_instance() {
    return reinterpret_cast<const LeadersChangeMess*>(
               &_LeadersChangeMess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LeadersChangeMess& a, LeadersChangeMess& b) {
    a.Swap(&b);
  }
  inline void Swap(LeadersChangeMess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeadersChangeMess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeadersChangeMess* New() const final {
    return CreateMaybeMessage<LeadersChangeMess>(nullptr);
  }

  LeadersChangeMess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeadersChangeMess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeadersChangeMess& from);
  void MergeFrom(const LeadersChangeMess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeadersChangeMess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.LeadersChangeMess";
  }
  protected:
  explicit LeadersChangeMess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LeadersChangeMess_op_types op_types;
  static constexpr op_types LC_INIT =
    LeadersChangeMess_op_types_LC_INIT;
  static constexpr op_types LC_ADD =
    LeadersChangeMess_op_types_LC_ADD;
  static constexpr op_types LC_REMOVE =
    LeadersChangeMess_op_types_LC_REMOVE;
  static constexpr op_types LC_REPLACE =
    LeadersChangeMess_op_types_LC_REPLACE;
  static inline bool op_types_IsValid(int value) {
    return LeadersChangeMess_op_types_IsValid(value);
  }
  static constexpr op_types op_types_MIN =
    LeadersChangeMess_op_types_op_types_MIN;
  static constexpr op_types op_types_MAX =
    LeadersChangeMess_op_types_op_types_MAX;
  static constexpr int op_types_ARRAYSIZE =
    LeadersChangeMess_op_types_op_types_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  op_types_descriptor() {
    return LeadersChangeMess_op_types_descriptor();
  }
  template<typename T>
  static inline const std::string& op_types_Name(T enum_t_value) {
    static_assert(::std::is_same<T, op_types>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function op_types_Name.");
    return LeadersChangeMess_op_types_Name(enum_t_value);
  }
  static inline bool op_types_Parse(const std::string& name,
      op_types* value) {
    return LeadersChangeMess_op_types_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeadersFieldNumber = 3,
    kOpTypeFieldNumber = 1,
    kEpochFieldNumber = 2,
  };
  // repeated .phxgrouplist.NodeInfo leaders = 3;
  int leaders_size() const;
  private:
  int _internal_leaders_size() const;
  public:
  void clear_leaders();
  ::phxgrouplist::NodeInfo* mutable_leaders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo >*
      mutable_leaders();
  private:
  const ::phxgrouplist::NodeInfo& _internal_leaders(int index) const;
  ::phxgrouplist::NodeInfo* _internal_add_leaders();
  public:
  const ::phxgrouplist::NodeInfo& leaders(int index) const;
  ::phxgrouplist::NodeInfo* add_leaders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo >&
      leaders() const;

  // .phxgrouplist.LeadersChangeMess.op_types op_type = 1;
  void clear_op_type();
  ::phxgrouplist::LeadersChangeMess_op_types op_type() const;
  void set_op_type(::phxgrouplist::LeadersChangeMess_op_types value);
  private:
  ::phxgrouplist::LeadersChangeMess_op_types _internal_op_type() const;
  void _internal_set_op_type(::phxgrouplist::LeadersChangeMess_op_types value);
  public:

  // uint32 epoch = 2;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxgrouplist.LeadersChangeMess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo > leaders_;
  int op_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// -------------------------------------------------------------------

class NodeStorageMess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxgrouplist.NodeStorageMess) */ {
 public:
  inline NodeStorageMess() : NodeStorageMess(nullptr) {};
  virtual ~NodeStorageMess();

  NodeStorageMess(const NodeStorageMess& from);
  NodeStorageMess(NodeStorageMess&& from) noexcept
    : NodeStorageMess() {
    *this = ::std::move(from);
  }

  inline NodeStorageMess& operator=(const NodeStorageMess& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStorageMess& operator=(NodeStorageMess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeStorageMess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeStorageMess* internal_default_instance() {
    return reinterpret_cast<const NodeStorageMess*>(
               &_NodeStorageMess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NodeStorageMess& a, NodeStorageMess& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeStorageMess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeStorageMess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeStorageMess* New() const final {
    return CreateMaybeMessage<NodeStorageMess>(nullptr);
  }

  NodeStorageMess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeStorageMess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeStorageMess& from);
  void MergeFrom(const NodeStorageMess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeStorageMess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxgrouplist.NodeStorageMess";
  }
  protected:
  explicit NodeStorageMess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GroupListMess_2eproto);
    return ::descriptor_table_GroupListMess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacityFieldNumber = 1,
    kDfsUsedFieldNumber = 2,
    kRemainingFieldNumber = 3,
  };
  // uint64 capacity = 1;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dfs_used = 2;
  void clear_dfs_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 dfs_used() const;
  void set_dfs_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dfs_used() const;
  void _internal_set_dfs_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 remaining = 3;
  void clear_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining() const;
  void set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remaining() const;
  void _internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:phxgrouplist.NodeStorageMess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dfs_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GroupListMess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeInfo

// uint32 nodePort = 1;
inline void NodeInfo::clear_nodeport() {
  nodeport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::_internal_nodeport() const {
  return nodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::nodeport() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.NodeInfo.nodePort)
  return _internal_nodeport();
}
inline void NodeInfo::_internal_set_nodeport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nodeport_ = value;
}
inline void NodeInfo::set_nodeport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nodeport(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.NodeInfo.nodePort)
}

// string nodeIp = 2;
inline void NodeInfo::clear_nodeip() {
  nodeip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NodeInfo::nodeip() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.NodeInfo.nodeIp)
  return _internal_nodeip();
}
inline void NodeInfo::set_nodeip(const std::string& value) {
  _internal_set_nodeip(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.NodeInfo.nodeIp)
}
inline std::string* NodeInfo::mutable_nodeip() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.NodeInfo.nodeIp)
  return _internal_mutable_nodeip();
}
inline const std::string& NodeInfo::_internal_nodeip() const {
  return nodeip_.Get();
}
inline void NodeInfo::_internal_set_nodeip(const std::string& value) {
  
  nodeip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeInfo::set_nodeip(std::string&& value) {
  
  nodeip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxgrouplist.NodeInfo.nodeIp)
}
inline void NodeInfo::set_nodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxgrouplist.NodeInfo.nodeIp)
}
inline void NodeInfo::set_nodeip(const char* value,
    size_t size) {
  
  nodeip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxgrouplist.NodeInfo.nodeIp)
}
inline std::string* NodeInfo::_internal_mutable_nodeip() {
  
  return nodeip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeInfo::release_nodeip() {
  // @@protoc_insertion_point(field_release:phxgrouplist.NodeInfo.nodeIp)
  return nodeip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeInfo::set_allocated_nodeip(std::string* nodeip) {
  if (nodeip != nullptr) {
    
  } else {
    
  }
  nodeip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.NodeInfo.nodeIp)
}
inline std::string* NodeInfo::unsafe_arena_release_nodeip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxgrouplist.NodeInfo.nodeIp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nodeip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NodeInfo::unsafe_arena_set_allocated_nodeip(
    std::string* nodeip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nodeip != nullptr) {
    
  } else {
    
  }
  nodeip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nodeip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.NodeInfo.nodeIp)
}

// -------------------------------------------------------------------

// GroupInfo

// .phxgrouplist.NodeInfo leader = 1;
inline bool GroupInfo::_internal_has_leader() const {
  return this != internal_default_instance() && leader_ != nullptr;
}
inline bool GroupInfo::has_leader() const {
  return _internal_has_leader();
}
inline void GroupInfo::clear_leader() {
  if (GetArena() == nullptr && leader_ != nullptr) {
    delete leader_;
  }
  leader_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GroupInfo::_internal_leader() const {
  const ::phxgrouplist::NodeInfo* p = leader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GroupInfo::leader() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupInfo.leader)
  return _internal_leader();
}
inline void GroupInfo::unsafe_arena_set_allocated_leader(
    ::phxgrouplist::NodeInfo* leader) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_);
  }
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GroupInfo.leader)
}
inline ::phxgrouplist::NodeInfo* GroupInfo::release_leader() {
  auto temp = unsafe_arena_release_leader();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupInfo::unsafe_arena_release_leader() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GroupInfo.leader)
  
  ::phxgrouplist::NodeInfo* temp = leader_;
  leader_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupInfo::_internal_mutable_leader() {
  
  if (leader_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    leader_ = p;
  }
  return leader_;
}
inline ::phxgrouplist::NodeInfo* GroupInfo::mutable_leader() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupInfo.leader)
  return _internal_mutable_leader();
}
inline void GroupInfo::set_allocated_leader(::phxgrouplist::NodeInfo* leader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leader_;
  }
  if (leader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leader);
    if (message_arena != submessage_arena) {
      leader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GroupInfo.leader)
}

// repeated .phxgrouplist.NodeInfo Nodelist = 2;
inline int GroupInfo::_internal_nodelist_size() const {
  return nodelist_.size();
}
inline int GroupInfo::nodelist_size() const {
  return _internal_nodelist_size();
}
inline void GroupInfo::clear_nodelist() {
  nodelist_.Clear();
}
inline ::phxgrouplist::NodeInfo* GroupInfo::mutable_nodelist(int index) {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupInfo.Nodelist)
  return nodelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo >*
GroupInfo::mutable_nodelist() {
  // @@protoc_insertion_point(field_mutable_list:phxgrouplist.GroupInfo.Nodelist)
  return &nodelist_;
}
inline const ::phxgrouplist::NodeInfo& GroupInfo::_internal_nodelist(int index) const {
  return nodelist_.Get(index);
}
inline const ::phxgrouplist::NodeInfo& GroupInfo::nodelist(int index) const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupInfo.Nodelist)
  return _internal_nodelist(index);
}
inline ::phxgrouplist::NodeInfo* GroupInfo::_internal_add_nodelist() {
  return nodelist_.Add();
}
inline ::phxgrouplist::NodeInfo* GroupInfo::add_nodelist() {
  // @@protoc_insertion_point(field_add:phxgrouplist.GroupInfo.Nodelist)
  return _internal_add_nodelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo >&
GroupInfo::nodelist() const {
  // @@protoc_insertion_point(field_list:phxgrouplist.GroupInfo.Nodelist)
  return nodelist_;
}

// -------------------------------------------------------------------

// GroupList

// uint32 epoch = 2;
inline void GroupList::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupList::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupList::epoch() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupList.epoch)
  return _internal_epoch();
}
inline void GroupList::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void GroupList::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.GroupList.epoch)
}

// .phxgrouplist.NodeInfo Master = 3;
inline bool GroupList::_internal_has_master() const {
  return this != internal_default_instance() && master_ != nullptr;
}
inline bool GroupList::has_master() const {
  return _internal_has_master();
}
inline void GroupList::clear_master() {
  if (GetArena() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GroupList::_internal_master() const {
  const ::phxgrouplist::NodeInfo* p = master_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GroupList::master() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupList.Master)
  return _internal_master();
}
inline void GroupList::unsafe_arena_set_allocated_master(
    ::phxgrouplist::NodeInfo* master) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_);
  }
  master_ = master;
  if (master) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GroupList.Master)
}
inline ::phxgrouplist::NodeInfo* GroupList::release_master() {
  auto temp = unsafe_arena_release_master();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupList::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GroupList.Master)
  
  ::phxgrouplist::NodeInfo* temp = master_;
  master_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupList::_internal_mutable_master() {
  
  if (master_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    master_ = p;
  }
  return master_;
}
inline ::phxgrouplist::NodeInfo* GroupList::mutable_master() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupList.Master)
  return _internal_mutable_master();
}
inline void GroupList::set_allocated_master(::phxgrouplist::NodeInfo* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete master_;
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(master);
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    
  } else {
    
  }
  master_ = master;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GroupList.Master)
}

// .phxgrouplist.GroupList.st_type groupStatus = 4;
inline void GroupList::clear_groupstatus() {
  groupstatus_ = 0;
}
inline ::phxgrouplist::GroupList_st_type GroupList::_internal_groupstatus() const {
  return static_cast< ::phxgrouplist::GroupList_st_type >(groupstatus_);
}
inline ::phxgrouplist::GroupList_st_type GroupList::groupstatus() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupList.groupStatus)
  return _internal_groupstatus();
}
inline void GroupList::_internal_set_groupstatus(::phxgrouplist::GroupList_st_type value) {
  
  groupstatus_ = value;
}
inline void GroupList::set_groupstatus(::phxgrouplist::GroupList_st_type value) {
  _internal_set_groupstatus(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.GroupList.groupStatus)
}

// repeated .phxgrouplist.GroupInfo groups = 5;
inline int GroupList::_internal_groups_size() const {
  return groups_.size();
}
inline int GroupList::groups_size() const {
  return _internal_groups_size();
}
inline void GroupList::clear_groups() {
  groups_.Clear();
}
inline ::phxgrouplist::GroupInfo* GroupList::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupList.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::GroupInfo >*
GroupList::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:phxgrouplist.GroupList.groups)
  return &groups_;
}
inline const ::phxgrouplist::GroupInfo& GroupList::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::phxgrouplist::GroupInfo& GroupList::groups(int index) const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupList.groups)
  return _internal_groups(index);
}
inline ::phxgrouplist::GroupInfo* GroupList::_internal_add_groups() {
  return groups_.Add();
}
inline ::phxgrouplist::GroupInfo* GroupList::add_groups() {
  // @@protoc_insertion_point(field_add:phxgrouplist.GroupList.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::GroupInfo >&
GroupList::groups() const {
  // @@protoc_insertion_point(field_list:phxgrouplist.GroupList.groups)
  return groups_;
}

// -------------------------------------------------------------------

// GroupListInit

// uint32 epoch = 1;
inline void GroupListInit::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupListInit::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupListInit::epoch() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupListInit.epoch)
  return _internal_epoch();
}
inline void GroupListInit::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void GroupListInit::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.GroupListInit.epoch)
}

// .phxgrouplist.NodeInfo Master = 2;
inline bool GroupListInit::_internal_has_master() const {
  return this != internal_default_instance() && master_ != nullptr;
}
inline bool GroupListInit::has_master() const {
  return _internal_has_master();
}
inline void GroupListInit::clear_master() {
  if (GetArena() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GroupListInit::_internal_master() const {
  const ::phxgrouplist::NodeInfo* p = master_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GroupListInit::master() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupListInit.Master)
  return _internal_master();
}
inline void GroupListInit::unsafe_arena_set_allocated_master(
    ::phxgrouplist::NodeInfo* master) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_);
  }
  master_ = master;
  if (master) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GroupListInit.Master)
}
inline ::phxgrouplist::NodeInfo* GroupListInit::release_master() {
  auto temp = unsafe_arena_release_master();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListInit::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GroupListInit.Master)
  
  ::phxgrouplist::NodeInfo* temp = master_;
  master_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListInit::_internal_mutable_master() {
  
  if (master_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    master_ = p;
  }
  return master_;
}
inline ::phxgrouplist::NodeInfo* GroupListInit::mutable_master() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupListInit.Master)
  return _internal_mutable_master();
}
inline void GroupListInit::set_allocated_master(::phxgrouplist::NodeInfo* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete master_;
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(master);
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    
  } else {
    
  }
  master_ = master;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GroupListInit.Master)
}

// .phxgrouplist.GroupList init_grouplist = 3;
inline bool GroupListInit::_internal_has_init_grouplist() const {
  return this != internal_default_instance() && init_grouplist_ != nullptr;
}
inline bool GroupListInit::has_init_grouplist() const {
  return _internal_has_init_grouplist();
}
inline void GroupListInit::clear_init_grouplist() {
  if (GetArena() == nullptr && init_grouplist_ != nullptr) {
    delete init_grouplist_;
  }
  init_grouplist_ = nullptr;
}
inline const ::phxgrouplist::GroupList& GroupListInit::_internal_init_grouplist() const {
  const ::phxgrouplist::GroupList* p = init_grouplist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::GroupList*>(
      &::phxgrouplist::_GroupList_default_instance_);
}
inline const ::phxgrouplist::GroupList& GroupListInit::init_grouplist() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupListInit.init_grouplist)
  return _internal_init_grouplist();
}
inline void GroupListInit::unsafe_arena_set_allocated_init_grouplist(
    ::phxgrouplist::GroupList* init_grouplist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(init_grouplist_);
  }
  init_grouplist_ = init_grouplist;
  if (init_grouplist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GroupListInit.init_grouplist)
}
inline ::phxgrouplist::GroupList* GroupListInit::release_init_grouplist() {
  auto temp = unsafe_arena_release_init_grouplist();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::GroupList* GroupListInit::unsafe_arena_release_init_grouplist() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GroupListInit.init_grouplist)
  
  ::phxgrouplist::GroupList* temp = init_grouplist_;
  init_grouplist_ = nullptr;
  return temp;
}
inline ::phxgrouplist::GroupList* GroupListInit::_internal_mutable_init_grouplist() {
  
  if (init_grouplist_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::GroupList>(GetArena());
    init_grouplist_ = p;
  }
  return init_grouplist_;
}
inline ::phxgrouplist::GroupList* GroupListInit::mutable_init_grouplist() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupListInit.init_grouplist)
  return _internal_mutable_init_grouplist();
}
inline void GroupListInit::set_allocated_init_grouplist(::phxgrouplist::GroupList* init_grouplist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete init_grouplist_;
  }
  if (init_grouplist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(init_grouplist);
    if (message_arena != submessage_arena) {
      init_grouplist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_grouplist, submessage_arena);
    }
    
  } else {
    
  }
  init_grouplist_ = init_grouplist;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GroupListInit.init_grouplist)
}

// -------------------------------------------------------------------

// GrouplistAdd

// uint32 epoch = 1;
inline void GrouplistAdd::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrouplistAdd::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrouplistAdd::epoch() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistAdd.epoch)
  return _internal_epoch();
}
inline void GrouplistAdd::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void GrouplistAdd::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.GrouplistAdd.epoch)
}

// .phxgrouplist.NodeInfo Master = 2;
inline bool GrouplistAdd::_internal_has_master() const {
  return this != internal_default_instance() && master_ != nullptr;
}
inline bool GrouplistAdd::has_master() const {
  return _internal_has_master();
}
inline void GrouplistAdd::clear_master() {
  if (GetArena() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GrouplistAdd::_internal_master() const {
  const ::phxgrouplist::NodeInfo* p = master_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GrouplistAdd::master() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistAdd.Master)
  return _internal_master();
}
inline void GrouplistAdd::unsafe_arena_set_allocated_master(
    ::phxgrouplist::NodeInfo* master) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_);
  }
  master_ = master;
  if (master) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GrouplistAdd.Master)
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::release_master() {
  auto temp = unsafe_arena_release_master();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GrouplistAdd.Master)
  
  ::phxgrouplist::NodeInfo* temp = master_;
  master_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::_internal_mutable_master() {
  
  if (master_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    master_ = p;
  }
  return master_;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::mutable_master() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GrouplistAdd.Master)
  return _internal_mutable_master();
}
inline void GrouplistAdd::set_allocated_master(::phxgrouplist::NodeInfo* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete master_;
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(master);
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    
  } else {
    
  }
  master_ = master;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GrouplistAdd.Master)
}

// .phxgrouplist.NodeInfo group_leader_addto = 3;
inline bool GrouplistAdd::_internal_has_group_leader_addto() const {
  return this != internal_default_instance() && group_leader_addto_ != nullptr;
}
inline bool GrouplistAdd::has_group_leader_addto() const {
  return _internal_has_group_leader_addto();
}
inline void GrouplistAdd::clear_group_leader_addto() {
  if (GetArena() == nullptr && group_leader_addto_ != nullptr) {
    delete group_leader_addto_;
  }
  group_leader_addto_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GrouplistAdd::_internal_group_leader_addto() const {
  const ::phxgrouplist::NodeInfo* p = group_leader_addto_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GrouplistAdd::group_leader_addto() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistAdd.group_leader_addto)
  return _internal_group_leader_addto();
}
inline void GrouplistAdd::unsafe_arena_set_allocated_group_leader_addto(
    ::phxgrouplist::NodeInfo* group_leader_addto) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_leader_addto_);
  }
  group_leader_addto_ = group_leader_addto;
  if (group_leader_addto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GrouplistAdd.group_leader_addto)
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::release_group_leader_addto() {
  auto temp = unsafe_arena_release_group_leader_addto();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::unsafe_arena_release_group_leader_addto() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GrouplistAdd.group_leader_addto)
  
  ::phxgrouplist::NodeInfo* temp = group_leader_addto_;
  group_leader_addto_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::_internal_mutable_group_leader_addto() {
  
  if (group_leader_addto_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    group_leader_addto_ = p;
  }
  return group_leader_addto_;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::mutable_group_leader_addto() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GrouplistAdd.group_leader_addto)
  return _internal_mutable_group_leader_addto();
}
inline void GrouplistAdd::set_allocated_group_leader_addto(::phxgrouplist::NodeInfo* group_leader_addto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_leader_addto_;
  }
  if (group_leader_addto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_leader_addto);
    if (message_arena != submessage_arena) {
      group_leader_addto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_leader_addto, submessage_arena);
    }
    
  } else {
    
  }
  group_leader_addto_ = group_leader_addto;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GrouplistAdd.group_leader_addto)
}

// .phxgrouplist.NodeInfo new_node = 4;
inline bool GrouplistAdd::_internal_has_new_node() const {
  return this != internal_default_instance() && new_node_ != nullptr;
}
inline bool GrouplistAdd::has_new_node() const {
  return _internal_has_new_node();
}
inline void GrouplistAdd::clear_new_node() {
  if (GetArena() == nullptr && new_node_ != nullptr) {
    delete new_node_;
  }
  new_node_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GrouplistAdd::_internal_new_node() const {
  const ::phxgrouplist::NodeInfo* p = new_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GrouplistAdd::new_node() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistAdd.new_node)
  return _internal_new_node();
}
inline void GrouplistAdd::unsafe_arena_set_allocated_new_node(
    ::phxgrouplist::NodeInfo* new_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_node_);
  }
  new_node_ = new_node;
  if (new_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GrouplistAdd.new_node)
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::release_new_node() {
  auto temp = unsafe_arena_release_new_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::unsafe_arena_release_new_node() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GrouplistAdd.new_node)
  
  ::phxgrouplist::NodeInfo* temp = new_node_;
  new_node_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::_internal_mutable_new_node() {
  
  if (new_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    new_node_ = p;
  }
  return new_node_;
}
inline ::phxgrouplist::NodeInfo* GrouplistAdd::mutable_new_node() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GrouplistAdd.new_node)
  return _internal_mutable_new_node();
}
inline void GrouplistAdd::set_allocated_new_node(::phxgrouplist::NodeInfo* new_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete new_node_;
  }
  if (new_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(new_node);
    if (message_arena != submessage_arena) {
      new_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_node, submessage_arena);
    }
    
  } else {
    
  }
  new_node_ = new_node;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GrouplistAdd.new_node)
}

// -------------------------------------------------------------------

// GroupListRemove

// uint32 epoch = 1;
inline void GroupListRemove::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupListRemove::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupListRemove::epoch() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupListRemove.epoch)
  return _internal_epoch();
}
inline void GroupListRemove::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void GroupListRemove::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.GroupListRemove.epoch)
}

// .phxgrouplist.NodeInfo Master = 2;
inline bool GroupListRemove::_internal_has_master() const {
  return this != internal_default_instance() && master_ != nullptr;
}
inline bool GroupListRemove::has_master() const {
  return _internal_has_master();
}
inline void GroupListRemove::clear_master() {
  if (GetArena() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GroupListRemove::_internal_master() const {
  const ::phxgrouplist::NodeInfo* p = master_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GroupListRemove::master() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupListRemove.Master)
  return _internal_master();
}
inline void GroupListRemove::unsafe_arena_set_allocated_master(
    ::phxgrouplist::NodeInfo* master) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_);
  }
  master_ = master;
  if (master) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GroupListRemove.Master)
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::release_master() {
  auto temp = unsafe_arena_release_master();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::unsafe_arena_release_master() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GroupListRemove.Master)
  
  ::phxgrouplist::NodeInfo* temp = master_;
  master_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::_internal_mutable_master() {
  
  if (master_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    master_ = p;
  }
  return master_;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::mutable_master() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupListRemove.Master)
  return _internal_mutable_master();
}
inline void GroupListRemove::set_allocated_master(::phxgrouplist::NodeInfo* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete master_;
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(master);
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    
  } else {
    
  }
  master_ = master;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GroupListRemove.Master)
}

// .phxgrouplist.NodeInfo group_oldleader_removefrom = 3;
inline bool GroupListRemove::_internal_has_group_oldleader_removefrom() const {
  return this != internal_default_instance() && group_oldleader_removefrom_ != nullptr;
}
inline bool GroupListRemove::has_group_oldleader_removefrom() const {
  return _internal_has_group_oldleader_removefrom();
}
inline void GroupListRemove::clear_group_oldleader_removefrom() {
  if (GetArena() == nullptr && group_oldleader_removefrom_ != nullptr) {
    delete group_oldleader_removefrom_;
  }
  group_oldleader_removefrom_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GroupListRemove::_internal_group_oldleader_removefrom() const {
  const ::phxgrouplist::NodeInfo* p = group_oldleader_removefrom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GroupListRemove::group_oldleader_removefrom() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupListRemove.group_oldleader_removefrom)
  return _internal_group_oldleader_removefrom();
}
inline void GroupListRemove::unsafe_arena_set_allocated_group_oldleader_removefrom(
    ::phxgrouplist::NodeInfo* group_oldleader_removefrom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_oldleader_removefrom_);
  }
  group_oldleader_removefrom_ = group_oldleader_removefrom;
  if (group_oldleader_removefrom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GroupListRemove.group_oldleader_removefrom)
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::release_group_oldleader_removefrom() {
  auto temp = unsafe_arena_release_group_oldleader_removefrom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::unsafe_arena_release_group_oldleader_removefrom() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GroupListRemove.group_oldleader_removefrom)
  
  ::phxgrouplist::NodeInfo* temp = group_oldleader_removefrom_;
  group_oldleader_removefrom_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::_internal_mutable_group_oldleader_removefrom() {
  
  if (group_oldleader_removefrom_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    group_oldleader_removefrom_ = p;
  }
  return group_oldleader_removefrom_;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::mutable_group_oldleader_removefrom() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupListRemove.group_oldleader_removefrom)
  return _internal_mutable_group_oldleader_removefrom();
}
inline void GroupListRemove::set_allocated_group_oldleader_removefrom(::phxgrouplist::NodeInfo* group_oldleader_removefrom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_oldleader_removefrom_;
  }
  if (group_oldleader_removefrom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_oldleader_removefrom);
    if (message_arena != submessage_arena) {
      group_oldleader_removefrom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_oldleader_removefrom, submessage_arena);
    }
    
  } else {
    
  }
  group_oldleader_removefrom_ = group_oldleader_removefrom;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GroupListRemove.group_oldleader_removefrom)
}

// .phxgrouplist.NodeInfo group_newleader_removefrom = 4;
inline bool GroupListRemove::_internal_has_group_newleader_removefrom() const {
  return this != internal_default_instance() && group_newleader_removefrom_ != nullptr;
}
inline bool GroupListRemove::has_group_newleader_removefrom() const {
  return _internal_has_group_newleader_removefrom();
}
inline void GroupListRemove::clear_group_newleader_removefrom() {
  if (GetArena() == nullptr && group_newleader_removefrom_ != nullptr) {
    delete group_newleader_removefrom_;
  }
  group_newleader_removefrom_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GroupListRemove::_internal_group_newleader_removefrom() const {
  const ::phxgrouplist::NodeInfo* p = group_newleader_removefrom_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GroupListRemove::group_newleader_removefrom() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupListRemove.group_newleader_removefrom)
  return _internal_group_newleader_removefrom();
}
inline void GroupListRemove::unsafe_arena_set_allocated_group_newleader_removefrom(
    ::phxgrouplist::NodeInfo* group_newleader_removefrom) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_newleader_removefrom_);
  }
  group_newleader_removefrom_ = group_newleader_removefrom;
  if (group_newleader_removefrom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GroupListRemove.group_newleader_removefrom)
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::release_group_newleader_removefrom() {
  auto temp = unsafe_arena_release_group_newleader_removefrom();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::unsafe_arena_release_group_newleader_removefrom() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GroupListRemove.group_newleader_removefrom)
  
  ::phxgrouplist::NodeInfo* temp = group_newleader_removefrom_;
  group_newleader_removefrom_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::_internal_mutable_group_newleader_removefrom() {
  
  if (group_newleader_removefrom_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    group_newleader_removefrom_ = p;
  }
  return group_newleader_removefrom_;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::mutable_group_newleader_removefrom() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupListRemove.group_newleader_removefrom)
  return _internal_mutable_group_newleader_removefrom();
}
inline void GroupListRemove::set_allocated_group_newleader_removefrom(::phxgrouplist::NodeInfo* group_newleader_removefrom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_newleader_removefrom_;
  }
  if (group_newleader_removefrom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_newleader_removefrom);
    if (message_arena != submessage_arena) {
      group_newleader_removefrom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group_newleader_removefrom, submessage_arena);
    }
    
  } else {
    
  }
  group_newleader_removefrom_ = group_newleader_removefrom;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GroupListRemove.group_newleader_removefrom)
}

// .phxgrouplist.NodeInfo remove_node = 5;
inline bool GroupListRemove::_internal_has_remove_node() const {
  return this != internal_default_instance() && remove_node_ != nullptr;
}
inline bool GroupListRemove::has_remove_node() const {
  return _internal_has_remove_node();
}
inline void GroupListRemove::clear_remove_node() {
  if (GetArena() == nullptr && remove_node_ != nullptr) {
    delete remove_node_;
  }
  remove_node_ = nullptr;
}
inline const ::phxgrouplist::NodeInfo& GroupListRemove::_internal_remove_node() const {
  const ::phxgrouplist::NodeInfo* p = remove_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::NodeInfo*>(
      &::phxgrouplist::_NodeInfo_default_instance_);
}
inline const ::phxgrouplist::NodeInfo& GroupListRemove::remove_node() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GroupListRemove.remove_node)
  return _internal_remove_node();
}
inline void GroupListRemove::unsafe_arena_set_allocated_remove_node(
    ::phxgrouplist::NodeInfo* remove_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remove_node_);
  }
  remove_node_ = remove_node;
  if (remove_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GroupListRemove.remove_node)
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::release_remove_node() {
  auto temp = unsafe_arena_release_remove_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::unsafe_arena_release_remove_node() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GroupListRemove.remove_node)
  
  ::phxgrouplist::NodeInfo* temp = remove_node_;
  remove_node_ = nullptr;
  return temp;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::_internal_mutable_remove_node() {
  
  if (remove_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::NodeInfo>(GetArena());
    remove_node_ = p;
  }
  return remove_node_;
}
inline ::phxgrouplist::NodeInfo* GroupListRemove::mutable_remove_node() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GroupListRemove.remove_node)
  return _internal_mutable_remove_node();
}
inline void GroupListRemove::set_allocated_remove_node(::phxgrouplist::NodeInfo* remove_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remove_node_;
  }
  if (remove_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remove_node);
    if (message_arena != submessage_arena) {
      remove_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_node, submessage_arena);
    }
    
  } else {
    
  }
  remove_node_ = remove_node;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GroupListRemove.remove_node)
}

// -------------------------------------------------------------------

// GrouplistMess

// .phxgrouplist.GrouplistMess.op_types op_type = 1;
inline void GrouplistMess::clear_op_type() {
  op_type_ = 0;
}
inline ::phxgrouplist::GrouplistMess_op_types GrouplistMess::_internal_op_type() const {
  return static_cast< ::phxgrouplist::GrouplistMess_op_types >(op_type_);
}
inline ::phxgrouplist::GrouplistMess_op_types GrouplistMess::op_type() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistMess.op_type)
  return _internal_op_type();
}
inline void GrouplistMess::_internal_set_op_type(::phxgrouplist::GrouplistMess_op_types value) {
  
  op_type_ = value;
}
inline void GrouplistMess::set_op_type(::phxgrouplist::GrouplistMess_op_types value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.GrouplistMess.op_type)
}

// .phxgrouplist.GroupListInit gl_init = 2;
inline bool GrouplistMess::_internal_has_gl_init() const {
  return this != internal_default_instance() && gl_init_ != nullptr;
}
inline bool GrouplistMess::has_gl_init() const {
  return _internal_has_gl_init();
}
inline void GrouplistMess::clear_gl_init() {
  if (GetArena() == nullptr && gl_init_ != nullptr) {
    delete gl_init_;
  }
  gl_init_ = nullptr;
}
inline const ::phxgrouplist::GroupListInit& GrouplistMess::_internal_gl_init() const {
  const ::phxgrouplist::GroupListInit* p = gl_init_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::GroupListInit*>(
      &::phxgrouplist::_GroupListInit_default_instance_);
}
inline const ::phxgrouplist::GroupListInit& GrouplistMess::gl_init() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistMess.gl_init)
  return _internal_gl_init();
}
inline void GrouplistMess::unsafe_arena_set_allocated_gl_init(
    ::phxgrouplist::GroupListInit* gl_init) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gl_init_);
  }
  gl_init_ = gl_init;
  if (gl_init) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GrouplistMess.gl_init)
}
inline ::phxgrouplist::GroupListInit* GrouplistMess::release_gl_init() {
  auto temp = unsafe_arena_release_gl_init();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::GroupListInit* GrouplistMess::unsafe_arena_release_gl_init() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GrouplistMess.gl_init)
  
  ::phxgrouplist::GroupListInit* temp = gl_init_;
  gl_init_ = nullptr;
  return temp;
}
inline ::phxgrouplist::GroupListInit* GrouplistMess::_internal_mutable_gl_init() {
  
  if (gl_init_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::GroupListInit>(GetArena());
    gl_init_ = p;
  }
  return gl_init_;
}
inline ::phxgrouplist::GroupListInit* GrouplistMess::mutable_gl_init() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GrouplistMess.gl_init)
  return _internal_mutable_gl_init();
}
inline void GrouplistMess::set_allocated_gl_init(::phxgrouplist::GroupListInit* gl_init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gl_init_;
  }
  if (gl_init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gl_init);
    if (message_arena != submessage_arena) {
      gl_init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gl_init, submessage_arena);
    }
    
  } else {
    
  }
  gl_init_ = gl_init;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GrouplistMess.gl_init)
}

// .phxgrouplist.GrouplistAdd gl_add = 3;
inline bool GrouplistMess::_internal_has_gl_add() const {
  return this != internal_default_instance() && gl_add_ != nullptr;
}
inline bool GrouplistMess::has_gl_add() const {
  return _internal_has_gl_add();
}
inline void GrouplistMess::clear_gl_add() {
  if (GetArena() == nullptr && gl_add_ != nullptr) {
    delete gl_add_;
  }
  gl_add_ = nullptr;
}
inline const ::phxgrouplist::GrouplistAdd& GrouplistMess::_internal_gl_add() const {
  const ::phxgrouplist::GrouplistAdd* p = gl_add_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::GrouplistAdd*>(
      &::phxgrouplist::_GrouplistAdd_default_instance_);
}
inline const ::phxgrouplist::GrouplistAdd& GrouplistMess::gl_add() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistMess.gl_add)
  return _internal_gl_add();
}
inline void GrouplistMess::unsafe_arena_set_allocated_gl_add(
    ::phxgrouplist::GrouplistAdd* gl_add) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gl_add_);
  }
  gl_add_ = gl_add;
  if (gl_add) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GrouplistMess.gl_add)
}
inline ::phxgrouplist::GrouplistAdd* GrouplistMess::release_gl_add() {
  auto temp = unsafe_arena_release_gl_add();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::GrouplistAdd* GrouplistMess::unsafe_arena_release_gl_add() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GrouplistMess.gl_add)
  
  ::phxgrouplist::GrouplistAdd* temp = gl_add_;
  gl_add_ = nullptr;
  return temp;
}
inline ::phxgrouplist::GrouplistAdd* GrouplistMess::_internal_mutable_gl_add() {
  
  if (gl_add_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::GrouplistAdd>(GetArena());
    gl_add_ = p;
  }
  return gl_add_;
}
inline ::phxgrouplist::GrouplistAdd* GrouplistMess::mutable_gl_add() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GrouplistMess.gl_add)
  return _internal_mutable_gl_add();
}
inline void GrouplistMess::set_allocated_gl_add(::phxgrouplist::GrouplistAdd* gl_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gl_add_;
  }
  if (gl_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gl_add);
    if (message_arena != submessage_arena) {
      gl_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gl_add, submessage_arena);
    }
    
  } else {
    
  }
  gl_add_ = gl_add;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GrouplistMess.gl_add)
}

// .phxgrouplist.GroupListRemove gl_remove = 4;
inline bool GrouplistMess::_internal_has_gl_remove() const {
  return this != internal_default_instance() && gl_remove_ != nullptr;
}
inline bool GrouplistMess::has_gl_remove() const {
  return _internal_has_gl_remove();
}
inline void GrouplistMess::clear_gl_remove() {
  if (GetArena() == nullptr && gl_remove_ != nullptr) {
    delete gl_remove_;
  }
  gl_remove_ = nullptr;
}
inline const ::phxgrouplist::GroupListRemove& GrouplistMess::_internal_gl_remove() const {
  const ::phxgrouplist::GroupListRemove* p = gl_remove_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxgrouplist::GroupListRemove*>(
      &::phxgrouplist::_GroupListRemove_default_instance_);
}
inline const ::phxgrouplist::GroupListRemove& GrouplistMess::gl_remove() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistMess.gl_remove)
  return _internal_gl_remove();
}
inline void GrouplistMess::unsafe_arena_set_allocated_gl_remove(
    ::phxgrouplist::GroupListRemove* gl_remove) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gl_remove_);
  }
  gl_remove_ = gl_remove;
  if (gl_remove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxgrouplist.GrouplistMess.gl_remove)
}
inline ::phxgrouplist::GroupListRemove* GrouplistMess::release_gl_remove() {
  auto temp = unsafe_arena_release_gl_remove();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxgrouplist::GroupListRemove* GrouplistMess::unsafe_arena_release_gl_remove() {
  // @@protoc_insertion_point(field_release:phxgrouplist.GrouplistMess.gl_remove)
  
  ::phxgrouplist::GroupListRemove* temp = gl_remove_;
  gl_remove_ = nullptr;
  return temp;
}
inline ::phxgrouplist::GroupListRemove* GrouplistMess::_internal_mutable_gl_remove() {
  
  if (gl_remove_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxgrouplist::GroupListRemove>(GetArena());
    gl_remove_ = p;
  }
  return gl_remove_;
}
inline ::phxgrouplist::GroupListRemove* GrouplistMess::mutable_gl_remove() {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.GrouplistMess.gl_remove)
  return _internal_mutable_gl_remove();
}
inline void GrouplistMess::set_allocated_gl_remove(::phxgrouplist::GroupListRemove* gl_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gl_remove_;
  }
  if (gl_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gl_remove);
    if (message_arena != submessage_arena) {
      gl_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gl_remove, submessage_arena);
    }
    
  } else {
    
  }
  gl_remove_ = gl_remove;
  // @@protoc_insertion_point(field_set_allocated:phxgrouplist.GrouplistMess.gl_remove)
}

// uint32 epoch = 5;
inline void GrouplistMess::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrouplistMess::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GrouplistMess::epoch() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.GrouplistMess.epoch)
  return _internal_epoch();
}
inline void GrouplistMess::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void GrouplistMess::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.GrouplistMess.epoch)
}

// -------------------------------------------------------------------

// LeadersChangeMess

// .phxgrouplist.LeadersChangeMess.op_types op_type = 1;
inline void LeadersChangeMess::clear_op_type() {
  op_type_ = 0;
}
inline ::phxgrouplist::LeadersChangeMess_op_types LeadersChangeMess::_internal_op_type() const {
  return static_cast< ::phxgrouplist::LeadersChangeMess_op_types >(op_type_);
}
inline ::phxgrouplist::LeadersChangeMess_op_types LeadersChangeMess::op_type() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.LeadersChangeMess.op_type)
  return _internal_op_type();
}
inline void LeadersChangeMess::_internal_set_op_type(::phxgrouplist::LeadersChangeMess_op_types value) {
  
  op_type_ = value;
}
inline void LeadersChangeMess::set_op_type(::phxgrouplist::LeadersChangeMess_op_types value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.LeadersChangeMess.op_type)
}

// uint32 epoch = 2;
inline void LeadersChangeMess::clear_epoch() {
  epoch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeadersChangeMess::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeadersChangeMess::epoch() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.LeadersChangeMess.epoch)
  return _internal_epoch();
}
inline void LeadersChangeMess::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  epoch_ = value;
}
inline void LeadersChangeMess::set_epoch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.LeadersChangeMess.epoch)
}

// repeated .phxgrouplist.NodeInfo leaders = 3;
inline int LeadersChangeMess::_internal_leaders_size() const {
  return leaders_.size();
}
inline int LeadersChangeMess::leaders_size() const {
  return _internal_leaders_size();
}
inline void LeadersChangeMess::clear_leaders() {
  leaders_.Clear();
}
inline ::phxgrouplist::NodeInfo* LeadersChangeMess::mutable_leaders(int index) {
  // @@protoc_insertion_point(field_mutable:phxgrouplist.LeadersChangeMess.leaders)
  return leaders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo >*
LeadersChangeMess::mutable_leaders() {
  // @@protoc_insertion_point(field_mutable_list:phxgrouplist.LeadersChangeMess.leaders)
  return &leaders_;
}
inline const ::phxgrouplist::NodeInfo& LeadersChangeMess::_internal_leaders(int index) const {
  return leaders_.Get(index);
}
inline const ::phxgrouplist::NodeInfo& LeadersChangeMess::leaders(int index) const {
  // @@protoc_insertion_point(field_get:phxgrouplist.LeadersChangeMess.leaders)
  return _internal_leaders(index);
}
inline ::phxgrouplist::NodeInfo* LeadersChangeMess::_internal_add_leaders() {
  return leaders_.Add();
}
inline ::phxgrouplist::NodeInfo* LeadersChangeMess::add_leaders() {
  // @@protoc_insertion_point(field_add:phxgrouplist.LeadersChangeMess.leaders)
  return _internal_add_leaders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::phxgrouplist::NodeInfo >&
LeadersChangeMess::leaders() const {
  // @@protoc_insertion_point(field_list:phxgrouplist.LeadersChangeMess.leaders)
  return leaders_;
}

// -------------------------------------------------------------------

// NodeStorageMess

// uint64 capacity = 1;
inline void NodeStorageMess::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStorageMess::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStorageMess::capacity() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.NodeStorageMess.capacity)
  return _internal_capacity();
}
inline void NodeStorageMess::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
}
inline void NodeStorageMess::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.NodeStorageMess.capacity)
}

// uint64 dfs_used = 2;
inline void NodeStorageMess::clear_dfs_used() {
  dfs_used_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStorageMess::_internal_dfs_used() const {
  return dfs_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStorageMess::dfs_used() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.NodeStorageMess.dfs_used)
  return _internal_dfs_used();
}
inline void NodeStorageMess::_internal_set_dfs_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dfs_used_ = value;
}
inline void NodeStorageMess::set_dfs_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dfs_used(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.NodeStorageMess.dfs_used)
}

// uint64 remaining = 3;
inline void NodeStorageMess::clear_remaining() {
  remaining_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStorageMess::_internal_remaining() const {
  return remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStorageMess::remaining() const {
  // @@protoc_insertion_point(field_get:phxgrouplist.NodeStorageMess.remaining)
  return _internal_remaining();
}
inline void NodeStorageMess::_internal_set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remaining_ = value;
}
inline void NodeStorageMess::set_remaining(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:phxgrouplist.NodeStorageMess.remaining)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace phxgrouplist

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::phxgrouplist::GroupList_st_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxgrouplist::GroupList_st_type>() {
  return ::phxgrouplist::GroupList_st_type_descriptor();
}
template <> struct is_proto_enum< ::phxgrouplist::GrouplistMess_op_types> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxgrouplist::GrouplistMess_op_types>() {
  return ::phxgrouplist::GrouplistMess_op_types_descriptor();
}
template <> struct is_proto_enum< ::phxgrouplist::LeadersChangeMess_op_types> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::phxgrouplist::LeadersChangeMess_op_types>() {
  return ::phxgrouplist::LeadersChangeMess_op_types_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GroupListMess_2eproto
