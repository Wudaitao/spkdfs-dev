// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phxeditlog.proto

#include "phxeditlog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_phxeditlog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogClose_phxeditlog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxeditlog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogCreate_phxeditlog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxeditlog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogGetAdditionalBlk_phxeditlog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxeditlog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMkdir_phxeditlog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxeditlog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogRm_phxeditlog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxeditlog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogRmr_phxeditlog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_phxeditlog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogUpdateFinish_phxeditlog_2eproto;
namespace phxeditlog {
class LogMkdirDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMkdir> _instance;
} _LogMkdir_default_instance_;
class LogRmrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogRmr> _instance;
} _LogRmr_default_instance_;
class LogCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogCreate> _instance;
} _LogCreate_default_instance_;
class LogGetAdditionalBlkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogGetAdditionalBlk> _instance;
} _LogGetAdditionalBlk_default_instance_;
class LogCloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogClose> _instance;
} _LogClose_default_instance_;
class LogUpdateFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogUpdateFinish> _instance;
} _LogUpdateFinish_default_instance_;
class LogRmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogRm> _instance;
} _LogRm_default_instance_;
class LogOperatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogOperator> _instance;
} _LogOperator_default_instance_;
}  // namespace phxeditlog
static void InitDefaultsscc_info_LogClose_phxeditlog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxeditlog::_LogClose_default_instance_;
    new (ptr) ::phxeditlog::LogClose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxeditlog::LogClose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogClose_phxeditlog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogClose_phxeditlog_2eproto}, {}};

static void InitDefaultsscc_info_LogCreate_phxeditlog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxeditlog::_LogCreate_default_instance_;
    new (ptr) ::phxeditlog::LogCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxeditlog::LogCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogCreate_phxeditlog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogCreate_phxeditlog_2eproto}, {}};

static void InitDefaultsscc_info_LogGetAdditionalBlk_phxeditlog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxeditlog::_LogGetAdditionalBlk_default_instance_;
    new (ptr) ::phxeditlog::LogGetAdditionalBlk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxeditlog::LogGetAdditionalBlk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogGetAdditionalBlk_phxeditlog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogGetAdditionalBlk_phxeditlog_2eproto}, {}};

static void InitDefaultsscc_info_LogMkdir_phxeditlog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxeditlog::_LogMkdir_default_instance_;
    new (ptr) ::phxeditlog::LogMkdir();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxeditlog::LogMkdir::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogMkdir_phxeditlog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogMkdir_phxeditlog_2eproto}, {}};

static void InitDefaultsscc_info_LogOperator_phxeditlog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxeditlog::_LogOperator_default_instance_;
    new (ptr) ::phxeditlog::LogOperator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxeditlog::LogOperator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_LogOperator_phxeditlog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_LogOperator_phxeditlog_2eproto}, {
      &scc_info_LogMkdir_phxeditlog_2eproto.base,
      &scc_info_LogRmr_phxeditlog_2eproto.base,
      &scc_info_LogCreate_phxeditlog_2eproto.base,
      &scc_info_LogGetAdditionalBlk_phxeditlog_2eproto.base,
      &scc_info_LogClose_phxeditlog_2eproto.base,
      &scc_info_LogRm_phxeditlog_2eproto.base,
      &scc_info_LogUpdateFinish_phxeditlog_2eproto.base,}};

static void InitDefaultsscc_info_LogRm_phxeditlog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxeditlog::_LogRm_default_instance_;
    new (ptr) ::phxeditlog::LogRm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxeditlog::LogRm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogRm_phxeditlog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogRm_phxeditlog_2eproto}, {}};

static void InitDefaultsscc_info_LogRmr_phxeditlog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxeditlog::_LogRmr_default_instance_;
    new (ptr) ::phxeditlog::LogRmr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxeditlog::LogRmr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogRmr_phxeditlog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogRmr_phxeditlog_2eproto}, {}};

static void InitDefaultsscc_info_LogUpdateFinish_phxeditlog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::phxeditlog::_LogUpdateFinish_default_instance_;
    new (ptr) ::phxeditlog::LogUpdateFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::phxeditlog::LogUpdateFinish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogUpdateFinish_phxeditlog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogUpdateFinish_phxeditlog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_phxeditlog_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_phxeditlog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_phxeditlog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_phxeditlog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogMkdir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogMkdir, key_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogMkdir, permission_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogMkdir, owner_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogMkdir, group_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogMkdir, modification_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogRmr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogRmr, key_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogRmr, modification_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, key_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, permission_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, owner_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, group_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, modification_time_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, blk_id_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, blk_sz_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, blk_rep_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, blk_seq_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, total_blk_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, t_blk_sz_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, t_sub_sz_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogCreate, t_help_sz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogGetAdditionalBlk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogGetAdditionalBlk, key_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogGetAdditionalBlk, blk_id_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogGetAdditionalBlk, blk_sz_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogGetAdditionalBlk, blk_rep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogClose, key_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogClose, modification_time_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogClose, len_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogClose, blk_rep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogUpdateFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogUpdateFinish, key_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogUpdateFinish, blk_id_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogUpdateFinish, blk_size_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogUpdateFinish, dn_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogRm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogRm, key_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogRm, modification_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, optype_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, mkr_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, rmr_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, cre_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, gab_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, cle_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, rm_),
  PROTOBUF_FIELD_OFFSET(::phxeditlog::LogOperator, luf_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::phxeditlog::LogMkdir)},
  { 10, -1, sizeof(::phxeditlog::LogRmr)},
  { 17, -1, sizeof(::phxeditlog::LogCreate)},
  { 35, -1, sizeof(::phxeditlog::LogGetAdditionalBlk)},
  { 44, -1, sizeof(::phxeditlog::LogClose)},
  { 53, -1, sizeof(::phxeditlog::LogUpdateFinish)},
  { 62, -1, sizeof(::phxeditlog::LogRm)},
  { 69, -1, sizeof(::phxeditlog::LogOperator)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxeditlog::_LogMkdir_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxeditlog::_LogRmr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxeditlog::_LogCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxeditlog::_LogGetAdditionalBlk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxeditlog::_LogClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxeditlog::_LogUpdateFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxeditlog::_LogRm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::phxeditlog::_LogOperator_default_instance_),
};

const char descriptor_table_protodef_phxeditlog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020phxeditlog.proto\022\nphxeditlog\"d\n\010LogMkd"
  "ir\022\013\n\003key\030\001 \001(\t\022\022\n\npermission\030\002 \001(\r\022\r\n\005o"
  "wner\030\003 \001(\t\022\r\n\005group\030\004 \001(\t\022\031\n\021modificatio"
  "n_time\030\005 \001(\004\"0\n\006LogRmr\022\013\n\003key\030\001 \001(\t\022\031\n\021m"
  "odification_time\030\002 \001(\004\"\361\001\n\tLogCreate\022\013\n\003"
  "key\030\001 \001(\t\022\022\n\npermission\030\002 \001(\r\022\r\n\005owner\030\003"
  " \001(\t\022\r\n\005group\030\004 \001(\t\022\031\n\021modification_time"
  "\030\005 \001(\004\022\016\n\006blk_id\030\006 \001(\004\022\016\n\006blk_sz\030\007 \001(\004\022\017"
  "\n\007blk_rep\030\010 \001(\r\022\017\n\007blk_seq\030\t \001(\r\022\021\n\ttota"
  "l_blk\030\n \001(\r\022\020\n\010t_blk_sz\030\013 \001(\r\022\020\n\010t_sub_s"
  "z\030\014 \001(\r\022\021\n\tt_help_sz\030\r \001(\r\"S\n\023LogGetAddi"
  "tionalBlk\022\013\n\003key\030\001 \001(\t\022\016\n\006blk_id\030\002 \001(\004\022\016"
  "\n\006blk_sz\030\003 \001(\004\022\017\n\007blk_rep\030\004 \001(\r\"P\n\010LogCl"
  "ose\022\013\n\003key\030\001 \001(\t\022\031\n\021modification_time\030\002 "
  "\001(\004\022\013\n\003len\030\003 \001(\004\022\017\n\007blk_rep\030\004 \001(\r\"O\n\017Log"
  "UpdateFinish\022\013\n\003key\030\001 \001(\t\022\016\n\006blk_id\030\002 \001("
  "\004\022\020\n\010blk_size\030\003 \001(\004\022\r\n\005dn_ip\030\004 \001(\t\"/\n\005Lo"
  "gRm\022\013\n\003key\030\001 \001(\t\022\031\n\021modification_time\030\002 "
  "\001(\004\"\237\002\n\013LogOperator\022\016\n\006optype\030\001 \001(\r\022!\n\003m"
  "kr\030\002 \001(\0132\024.phxeditlog.LogMkdir\022\037\n\003rmr\030\003 "
  "\001(\0132\022.phxeditlog.LogRmr\022\"\n\003cre\030\004 \001(\0132\025.p"
  "hxeditlog.LogCreate\022,\n\003gab\030\005 \001(\0132\037.phxed"
  "itlog.LogGetAdditionalBlk\022!\n\003cle\030\006 \001(\0132\024"
  ".phxeditlog.LogClose\022\035\n\002rm\030\007 \001(\0132\021.phxed"
  "itlog.LogRm\022(\n\003luf\030\010 \001(\0132\033.phxeditlog.Lo"
  "gUpdateFinishb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_phxeditlog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_phxeditlog_2eproto_sccs[8] = {
  &scc_info_LogClose_phxeditlog_2eproto.base,
  &scc_info_LogCreate_phxeditlog_2eproto.base,
  &scc_info_LogGetAdditionalBlk_phxeditlog_2eproto.base,
  &scc_info_LogMkdir_phxeditlog_2eproto.base,
  &scc_info_LogOperator_phxeditlog_2eproto.base,
  &scc_info_LogRm_phxeditlog_2eproto.base,
  &scc_info_LogRmr_phxeditlog_2eproto.base,
  &scc_info_LogUpdateFinish_phxeditlog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_phxeditlog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phxeditlog_2eproto = {
  false, false, descriptor_table_protodef_phxeditlog_2eproto, "phxeditlog.proto", 1021,
  &descriptor_table_phxeditlog_2eproto_once, descriptor_table_phxeditlog_2eproto_sccs, descriptor_table_phxeditlog_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_phxeditlog_2eproto::offsets,
  file_level_metadata_phxeditlog_2eproto, 8, file_level_enum_descriptors_phxeditlog_2eproto, file_level_service_descriptors_phxeditlog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_phxeditlog_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_phxeditlog_2eproto)), true);
namespace phxeditlog {

// ===================================================================

void LogMkdir::InitAsDefaultInstance() {
}
class LogMkdir::_Internal {
 public:
};

LogMkdir::LogMkdir(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxeditlog.LogMkdir)
}
LogMkdir::LogMkdir(const LogMkdir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_owner(),
      GetArena());
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group().empty()) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group(),
      GetArena());
  }
  ::memcpy(&modification_time_, &from.modification_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&modification_time_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogMkdir)
}

void LogMkdir::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMkdir_phxeditlog_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&modification_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&modification_time_)) + sizeof(permission_));
}

LogMkdir::~LogMkdir() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogMkdir)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogMkdir::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogMkdir::ArenaDtor(void* object) {
  LogMkdir* _this = reinterpret_cast< LogMkdir* >(object);
  (void)_this;
}
void LogMkdir::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogMkdir::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMkdir& LogMkdir::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMkdir_phxeditlog_2eproto.base);
  return *internal_default_instance();
}


void LogMkdir::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogMkdir)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&modification_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&modification_time_)) + sizeof(permission_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogMkdir::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogMkdir.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogMkdir.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogMkdir.group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 modification_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          modification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogMkdir::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogMkdir)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint32 permission = 2;
  if (this->permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_permission(), target);
  }

  // string owner = 3;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.owner");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner(), target);
  }

  // string group = 4;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogMkdir.group");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group(), target);
  }

  // uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_modification_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogMkdir)
  return target;
}

size_t LogMkdir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogMkdir)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string owner = 3;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string group = 4;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_modification_time());
  }

  // uint32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_permission());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMkdir::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogMkdir)
  GOOGLE_DCHECK_NE(&from, this);
  const LogMkdir* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogMkdir>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogMkdir)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogMkdir)
    MergeFrom(*source);
  }
}

void LogMkdir::MergeFrom(const LogMkdir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogMkdir)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.group().size() > 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.modification_time() != 0) {
    _internal_set_modification_time(from._internal_modification_time());
  }
  if (from.permission() != 0) {
    _internal_set_permission(from._internal_permission());
  }
}

void LogMkdir::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogMkdir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMkdir::CopyFrom(const LogMkdir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogMkdir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMkdir::IsInitialized() const {
  return true;
}

void LogMkdir::InternalSwap(LogMkdir* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogMkdir, permission_)
      + sizeof(LogMkdir::permission_)
      - PROTOBUF_FIELD_OFFSET(LogMkdir, modification_time_)>(
          reinterpret_cast<char*>(&modification_time_),
          reinterpret_cast<char*>(&other->modification_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMkdir::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogRmr::InitAsDefaultInstance() {
}
class LogRmr::_Internal {
 public:
};

LogRmr::LogRmr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxeditlog.LogRmr)
}
LogRmr::LogRmr(const LogRmr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  modification_time_ = from.modification_time_;
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogRmr)
}

void LogRmr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogRmr_phxeditlog_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modification_time_ = PROTOBUF_ULONGLONG(0);
}

LogRmr::~LogRmr() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogRmr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogRmr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogRmr::ArenaDtor(void* object) {
  LogRmr* _this = reinterpret_cast< LogRmr* >(object);
  (void)_this;
}
void LogRmr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogRmr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogRmr& LogRmr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogRmr_phxeditlog_2eproto.base);
  return *internal_default_instance();
}


void LogRmr::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogRmr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modification_time_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRmr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogRmr.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 modification_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogRmr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogRmr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogRmr.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_modification_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogRmr)
  return target;
}

size_t LogRmr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogRmr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_modification_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogRmr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogRmr)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRmr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogRmr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogRmr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogRmr)
    MergeFrom(*source);
  }
}

void LogRmr::MergeFrom(const LogRmr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogRmr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.modification_time() != 0) {
    _internal_set_modification_time(from._internal_modification_time());
  }
}

void LogRmr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogRmr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRmr::CopyFrom(const LogRmr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogRmr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRmr::IsInitialized() const {
  return true;
}

void LogRmr::InternalSwap(LogRmr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(modification_time_, other->modification_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRmr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogCreate::InitAsDefaultInstance() {
}
class LogCreate::_Internal {
 public:
};

LogCreate::LogCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxeditlog.LogCreate)
}
LogCreate::LogCreate(const LogCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_owner(),
      GetArena());
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group().empty()) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group(),
      GetArena());
  }
  ::memcpy(&modification_time_, &from.modification_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_help_sz_) -
    reinterpret_cast<char*>(&modification_time_)) + sizeof(t_help_sz_));
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogCreate)
}

void LogCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogCreate_phxeditlog_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&modification_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_help_sz_) -
      reinterpret_cast<char*>(&modification_time_)) + sizeof(t_help_sz_));
}

LogCreate::~LogCreate() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogCreate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogCreate::ArenaDtor(void* object) {
  LogCreate* _this = reinterpret_cast< LogCreate* >(object);
  (void)_this;
}
void LogCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogCreate& LogCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogCreate_phxeditlog_2eproto.base);
  return *internal_default_instance();
}


void LogCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&modification_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_help_sz_) -
      reinterpret_cast<char*>(&modification_time_)) + sizeof(t_help_sz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogCreate.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogCreate.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogCreate.group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 modification_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          modification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blk_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          blk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blk_sz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          blk_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blk_rep = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          blk_rep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blk_seq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          blk_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_blk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          total_blk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 t_blk_sz = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          t_blk_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 t_sub_sz = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          t_sub_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 t_help_sz = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          t_help_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogCreate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint32 permission = 2;
  if (this->permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_permission(), target);
  }

  // string owner = 3;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.owner");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner(), target);
  }

  // string group = 4;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogCreate.group");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group(), target);
  }

  // uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_modification_time(), target);
  }

  // uint64 blk_id = 6;
  if (this->blk_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_blk_id(), target);
  }

  // uint64 blk_sz = 7;
  if (this->blk_sz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_blk_sz(), target);
  }

  // uint32 blk_rep = 8;
  if (this->blk_rep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_blk_rep(), target);
  }

  // uint32 blk_seq = 9;
  if (this->blk_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_blk_seq(), target);
  }

  // uint32 total_blk = 10;
  if (this->total_blk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_total_blk(), target);
  }

  // uint32 t_blk_sz = 11;
  if (this->t_blk_sz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_t_blk_sz(), target);
  }

  // uint32 t_sub_sz = 12;
  if (this->t_sub_sz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_t_sub_sz(), target);
  }

  // uint32 t_help_sz = 13;
  if (this->t_help_sz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_t_help_sz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogCreate)
  return target;
}

size_t LogCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string owner = 3;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string group = 4;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // uint64 modification_time = 5;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_modification_time());
  }

  // uint32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_permission());
  }

  // uint32 blk_rep = 8;
  if (this->blk_rep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blk_rep());
  }

  // uint64 blk_id = 6;
  if (this->blk_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blk_id());
  }

  // uint64 blk_sz = 7;
  if (this->blk_sz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blk_sz());
  }

  // uint32 blk_seq = 9;
  if (this->blk_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blk_seq());
  }

  // uint32 total_blk = 10;
  if (this->total_blk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_blk());
  }

  // uint32 t_blk_sz = 11;
  if (this->t_blk_sz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_t_blk_sz());
  }

  // uint32 t_sub_sz = 12;
  if (this->t_sub_sz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_t_sub_sz());
  }

  // uint32 t_help_sz = 13;
  if (this->t_help_sz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_t_help_sz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const LogCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogCreate)
    MergeFrom(*source);
  }
}

void LogCreate::MergeFrom(const LogCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.group().size() > 0) {
    _internal_set_group(from._internal_group());
  }
  if (from.modification_time() != 0) {
    _internal_set_modification_time(from._internal_modification_time());
  }
  if (from.permission() != 0) {
    _internal_set_permission(from._internal_permission());
  }
  if (from.blk_rep() != 0) {
    _internal_set_blk_rep(from._internal_blk_rep());
  }
  if (from.blk_id() != 0) {
    _internal_set_blk_id(from._internal_blk_id());
  }
  if (from.blk_sz() != 0) {
    _internal_set_blk_sz(from._internal_blk_sz());
  }
  if (from.blk_seq() != 0) {
    _internal_set_blk_seq(from._internal_blk_seq());
  }
  if (from.total_blk() != 0) {
    _internal_set_total_blk(from._internal_total_blk());
  }
  if (from.t_blk_sz() != 0) {
    _internal_set_t_blk_sz(from._internal_t_blk_sz());
  }
  if (from.t_sub_sz() != 0) {
    _internal_set_t_sub_sz(from._internal_t_sub_sz());
  }
  if (from.t_help_sz() != 0) {
    _internal_set_t_help_sz(from._internal_t_help_sz());
  }
}

void LogCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogCreate::CopyFrom(const LogCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogCreate::IsInitialized() const {
  return true;
}

void LogCreate::InternalSwap(LogCreate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogCreate, t_help_sz_)
      + sizeof(LogCreate::t_help_sz_)
      - PROTOBUF_FIELD_OFFSET(LogCreate, modification_time_)>(
          reinterpret_cast<char*>(&modification_time_),
          reinterpret_cast<char*>(&other->modification_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogGetAdditionalBlk::InitAsDefaultInstance() {
}
class LogGetAdditionalBlk::_Internal {
 public:
};

LogGetAdditionalBlk::LogGetAdditionalBlk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxeditlog.LogGetAdditionalBlk)
}
LogGetAdditionalBlk::LogGetAdditionalBlk(const LogGetAdditionalBlk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  ::memcpy(&blk_id_, &from.blk_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&blk_rep_) -
    reinterpret_cast<char*>(&blk_id_)) + sizeof(blk_rep_));
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogGetAdditionalBlk)
}

void LogGetAdditionalBlk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogGetAdditionalBlk_phxeditlog_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blk_rep_) -
      reinterpret_cast<char*>(&blk_id_)) + sizeof(blk_rep_));
}

LogGetAdditionalBlk::~LogGetAdditionalBlk() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogGetAdditionalBlk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogGetAdditionalBlk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogGetAdditionalBlk::ArenaDtor(void* object) {
  LogGetAdditionalBlk* _this = reinterpret_cast< LogGetAdditionalBlk* >(object);
  (void)_this;
}
void LogGetAdditionalBlk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogGetAdditionalBlk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogGetAdditionalBlk& LogGetAdditionalBlk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogGetAdditionalBlk_phxeditlog_2eproto.base);
  return *internal_default_instance();
}


void LogGetAdditionalBlk::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogGetAdditionalBlk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&blk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blk_rep_) -
      reinterpret_cast<char*>(&blk_id_)) + sizeof(blk_rep_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogGetAdditionalBlk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogGetAdditionalBlk.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blk_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blk_sz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blk_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blk_rep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blk_rep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogGetAdditionalBlk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogGetAdditionalBlk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogGetAdditionalBlk.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint64 blk_id = 2;
  if (this->blk_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_blk_id(), target);
  }

  // uint64 blk_sz = 3;
  if (this->blk_sz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_blk_sz(), target);
  }

  // uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_blk_rep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogGetAdditionalBlk)
  return target;
}

size_t LogGetAdditionalBlk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogGetAdditionalBlk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // uint64 blk_id = 2;
  if (this->blk_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blk_id());
  }

  // uint64 blk_sz = 3;
  if (this->blk_sz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blk_sz());
  }

  // uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blk_rep());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogGetAdditionalBlk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogGetAdditionalBlk)
  GOOGLE_DCHECK_NE(&from, this);
  const LogGetAdditionalBlk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogGetAdditionalBlk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogGetAdditionalBlk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogGetAdditionalBlk)
    MergeFrom(*source);
  }
}

void LogGetAdditionalBlk::MergeFrom(const LogGetAdditionalBlk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogGetAdditionalBlk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.blk_id() != 0) {
    _internal_set_blk_id(from._internal_blk_id());
  }
  if (from.blk_sz() != 0) {
    _internal_set_blk_sz(from._internal_blk_sz());
  }
  if (from.blk_rep() != 0) {
    _internal_set_blk_rep(from._internal_blk_rep());
  }
}

void LogGetAdditionalBlk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogGetAdditionalBlk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogGetAdditionalBlk::CopyFrom(const LogGetAdditionalBlk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogGetAdditionalBlk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogGetAdditionalBlk::IsInitialized() const {
  return true;
}

void LogGetAdditionalBlk::InternalSwap(LogGetAdditionalBlk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogGetAdditionalBlk, blk_rep_)
      + sizeof(LogGetAdditionalBlk::blk_rep_)
      - PROTOBUF_FIELD_OFFSET(LogGetAdditionalBlk, blk_id_)>(
          reinterpret_cast<char*>(&blk_id_),
          reinterpret_cast<char*>(&other->blk_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogGetAdditionalBlk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogClose::InitAsDefaultInstance() {
}
class LogClose::_Internal {
 public:
};

LogClose::LogClose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxeditlog.LogClose)
}
LogClose::LogClose(const LogClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  ::memcpy(&modification_time_, &from.modification_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&blk_rep_) -
    reinterpret_cast<char*>(&modification_time_)) + sizeof(blk_rep_));
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogClose)
}

void LogClose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogClose_phxeditlog_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&modification_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blk_rep_) -
      reinterpret_cast<char*>(&modification_time_)) + sizeof(blk_rep_));
}

LogClose::~LogClose() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogClose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogClose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogClose::ArenaDtor(void* object) {
  LogClose* _this = reinterpret_cast< LogClose* >(object);
  (void)_this;
}
void LogClose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogClose& LogClose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogClose_phxeditlog_2eproto.base);
  return *internal_default_instance();
}


void LogClose::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&modification_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blk_rep_) -
      reinterpret_cast<char*>(&modification_time_)) + sizeof(blk_rep_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogClose.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 modification_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blk_rep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blk_rep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogClose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogClose.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_modification_time(), target);
  }

  // uint64 len = 3;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_len(), target);
  }

  // uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_blk_rep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogClose)
  return target;
}

size_t LogClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogClose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_modification_time());
  }

  // uint64 len = 3;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_len());
  }

  // uint32 blk_rep = 4;
  if (this->blk_rep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blk_rep());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogClose)
  GOOGLE_DCHECK_NE(&from, this);
  const LogClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogClose)
    MergeFrom(*source);
  }
}

void LogClose::MergeFrom(const LogClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.modification_time() != 0) {
    _internal_set_modification_time(from._internal_modification_time());
  }
  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.blk_rep() != 0) {
    _internal_set_blk_rep(from._internal_blk_rep());
  }
}

void LogClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogClose::CopyFrom(const LogClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogClose::IsInitialized() const {
  return true;
}

void LogClose::InternalSwap(LogClose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogClose, blk_rep_)
      + sizeof(LogClose::blk_rep_)
      - PROTOBUF_FIELD_OFFSET(LogClose, modification_time_)>(
          reinterpret_cast<char*>(&modification_time_),
          reinterpret_cast<char*>(&other->modification_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogUpdateFinish::InitAsDefaultInstance() {
}
class LogUpdateFinish::_Internal {
 public:
};

LogUpdateFinish::LogUpdateFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxeditlog.LogUpdateFinish)
}
LogUpdateFinish::LogUpdateFinish(const LogUpdateFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  dn_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dn_ip().empty()) {
    dn_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dn_ip(),
      GetArena());
  }
  ::memcpy(&blk_id_, &from.blk_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&blk_size_) -
    reinterpret_cast<char*>(&blk_id_)) + sizeof(blk_size_));
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogUpdateFinish)
}

void LogUpdateFinish::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogUpdateFinish_phxeditlog_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dn_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blk_size_) -
      reinterpret_cast<char*>(&blk_id_)) + sizeof(blk_size_));
}

LogUpdateFinish::~LogUpdateFinish() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogUpdateFinish)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogUpdateFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dn_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogUpdateFinish::ArenaDtor(void* object) {
  LogUpdateFinish* _this = reinterpret_cast< LogUpdateFinish* >(object);
  (void)_this;
}
void LogUpdateFinish::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogUpdateFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogUpdateFinish& LogUpdateFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogUpdateFinish_phxeditlog_2eproto.base);
  return *internal_default_instance();
}


void LogUpdateFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogUpdateFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dn_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&blk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blk_size_) -
      reinterpret_cast<char*>(&blk_id_)) + sizeof(blk_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogUpdateFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogUpdateFinish.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blk_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 blk_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blk_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dn_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dn_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogUpdateFinish.dn_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogUpdateFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogUpdateFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogUpdateFinish.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint64 blk_id = 2;
  if (this->blk_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_blk_id(), target);
  }

  // uint64 blk_size = 3;
  if (this->blk_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_blk_size(), target);
  }

  // string dn_ip = 4;
  if (this->dn_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dn_ip().data(), static_cast<int>(this->_internal_dn_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogUpdateFinish.dn_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dn_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogUpdateFinish)
  return target;
}

size_t LogUpdateFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogUpdateFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string dn_ip = 4;
  if (this->dn_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dn_ip());
  }

  // uint64 blk_id = 2;
  if (this->blk_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blk_id());
  }

  // uint64 blk_size = 3;
  if (this->blk_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blk_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogUpdateFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogUpdateFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const LogUpdateFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogUpdateFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogUpdateFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogUpdateFinish)
    MergeFrom(*source);
  }
}

void LogUpdateFinish::MergeFrom(const LogUpdateFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogUpdateFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.dn_ip().size() > 0) {
    _internal_set_dn_ip(from._internal_dn_ip());
  }
  if (from.blk_id() != 0) {
    _internal_set_blk_id(from._internal_blk_id());
  }
  if (from.blk_size() != 0) {
    _internal_set_blk_size(from._internal_blk_size());
  }
}

void LogUpdateFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogUpdateFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogUpdateFinish::CopyFrom(const LogUpdateFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogUpdateFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogUpdateFinish::IsInitialized() const {
  return true;
}

void LogUpdateFinish::InternalSwap(LogUpdateFinish* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dn_ip_.Swap(&other->dn_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogUpdateFinish, blk_size_)
      + sizeof(LogUpdateFinish::blk_size_)
      - PROTOBUF_FIELD_OFFSET(LogUpdateFinish, blk_id_)>(
          reinterpret_cast<char*>(&blk_id_),
          reinterpret_cast<char*>(&other->blk_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogUpdateFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogRm::InitAsDefaultInstance() {
}
class LogRm::_Internal {
 public:
};

LogRm::LogRm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxeditlog.LogRm)
}
LogRm::LogRm(const LogRm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  modification_time_ = from.modification_time_;
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogRm)
}

void LogRm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogRm_phxeditlog_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modification_time_ = PROTOBUF_ULONGLONG(0);
}

LogRm::~LogRm() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogRm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogRm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogRm::ArenaDtor(void* object) {
  LogRm* _this = reinterpret_cast< LogRm* >(object);
  (void)_this;
}
void LogRm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogRm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogRm& LogRm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogRm_phxeditlog_2eproto.base);
  return *internal_default_instance();
}


void LogRm::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogRm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modification_time_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "phxeditlog.LogRm.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 modification_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogRm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogRm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "phxeditlog.LogRm.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_modification_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogRm)
  return target;
}

size_t LogRm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogRm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // uint64 modification_time = 2;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_modification_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogRm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogRm)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogRm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogRm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogRm)
    MergeFrom(*source);
  }
}

void LogRm::MergeFrom(const LogRm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogRm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.modification_time() != 0) {
    _internal_set_modification_time(from._internal_modification_time());
  }
}

void LogRm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogRm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRm::CopyFrom(const LogRm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogRm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRm::IsInitialized() const {
  return true;
}

void LogRm::InternalSwap(LogRm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(modification_time_, other->modification_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogOperator::InitAsDefaultInstance() {
  ::phxeditlog::_LogOperator_default_instance_._instance.get_mutable()->mkr_ = const_cast< ::phxeditlog::LogMkdir*>(
      ::phxeditlog::LogMkdir::internal_default_instance());
  ::phxeditlog::_LogOperator_default_instance_._instance.get_mutable()->rmr_ = const_cast< ::phxeditlog::LogRmr*>(
      ::phxeditlog::LogRmr::internal_default_instance());
  ::phxeditlog::_LogOperator_default_instance_._instance.get_mutable()->cre_ = const_cast< ::phxeditlog::LogCreate*>(
      ::phxeditlog::LogCreate::internal_default_instance());
  ::phxeditlog::_LogOperator_default_instance_._instance.get_mutable()->gab_ = const_cast< ::phxeditlog::LogGetAdditionalBlk*>(
      ::phxeditlog::LogGetAdditionalBlk::internal_default_instance());
  ::phxeditlog::_LogOperator_default_instance_._instance.get_mutable()->cle_ = const_cast< ::phxeditlog::LogClose*>(
      ::phxeditlog::LogClose::internal_default_instance());
  ::phxeditlog::_LogOperator_default_instance_._instance.get_mutable()->rm_ = const_cast< ::phxeditlog::LogRm*>(
      ::phxeditlog::LogRm::internal_default_instance());
  ::phxeditlog::_LogOperator_default_instance_._instance.get_mutable()->luf_ = const_cast< ::phxeditlog::LogUpdateFinish*>(
      ::phxeditlog::LogUpdateFinish::internal_default_instance());
}
class LogOperator::_Internal {
 public:
  static const ::phxeditlog::LogMkdir& mkr(const LogOperator* msg);
  static const ::phxeditlog::LogRmr& rmr(const LogOperator* msg);
  static const ::phxeditlog::LogCreate& cre(const LogOperator* msg);
  static const ::phxeditlog::LogGetAdditionalBlk& gab(const LogOperator* msg);
  static const ::phxeditlog::LogClose& cle(const LogOperator* msg);
  static const ::phxeditlog::LogRm& rm(const LogOperator* msg);
  static const ::phxeditlog::LogUpdateFinish& luf(const LogOperator* msg);
};

const ::phxeditlog::LogMkdir&
LogOperator::_Internal::mkr(const LogOperator* msg) {
  return *msg->mkr_;
}
const ::phxeditlog::LogRmr&
LogOperator::_Internal::rmr(const LogOperator* msg) {
  return *msg->rmr_;
}
const ::phxeditlog::LogCreate&
LogOperator::_Internal::cre(const LogOperator* msg) {
  return *msg->cre_;
}
const ::phxeditlog::LogGetAdditionalBlk&
LogOperator::_Internal::gab(const LogOperator* msg) {
  return *msg->gab_;
}
const ::phxeditlog::LogClose&
LogOperator::_Internal::cle(const LogOperator* msg) {
  return *msg->cle_;
}
const ::phxeditlog::LogRm&
LogOperator::_Internal::rm(const LogOperator* msg) {
  return *msg->rm_;
}
const ::phxeditlog::LogUpdateFinish&
LogOperator::_Internal::luf(const LogOperator* msg) {
  return *msg->luf_;
}
LogOperator::LogOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:phxeditlog.LogOperator)
}
LogOperator::LogOperator(const LogOperator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mkr()) {
    mkr_ = new ::phxeditlog::LogMkdir(*from.mkr_);
  } else {
    mkr_ = nullptr;
  }
  if (from._internal_has_rmr()) {
    rmr_ = new ::phxeditlog::LogRmr(*from.rmr_);
  } else {
    rmr_ = nullptr;
  }
  if (from._internal_has_cre()) {
    cre_ = new ::phxeditlog::LogCreate(*from.cre_);
  } else {
    cre_ = nullptr;
  }
  if (from._internal_has_gab()) {
    gab_ = new ::phxeditlog::LogGetAdditionalBlk(*from.gab_);
  } else {
    gab_ = nullptr;
  }
  if (from._internal_has_cle()) {
    cle_ = new ::phxeditlog::LogClose(*from.cle_);
  } else {
    cle_ = nullptr;
  }
  if (from._internal_has_rm()) {
    rm_ = new ::phxeditlog::LogRm(*from.rm_);
  } else {
    rm_ = nullptr;
  }
  if (from._internal_has_luf()) {
    luf_ = new ::phxeditlog::LogUpdateFinish(*from.luf_);
  } else {
    luf_ = nullptr;
  }
  optype_ = from.optype_;
  // @@protoc_insertion_point(copy_constructor:phxeditlog.LogOperator)
}

void LogOperator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogOperator_phxeditlog_2eproto.base);
  ::memset(&mkr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optype_) -
      reinterpret_cast<char*>(&mkr_)) + sizeof(optype_));
}

LogOperator::~LogOperator() {
  // @@protoc_insertion_point(destructor:phxeditlog.LogOperator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogOperator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mkr_;
  if (this != internal_default_instance()) delete rmr_;
  if (this != internal_default_instance()) delete cre_;
  if (this != internal_default_instance()) delete gab_;
  if (this != internal_default_instance()) delete cle_;
  if (this != internal_default_instance()) delete rm_;
  if (this != internal_default_instance()) delete luf_;
}

void LogOperator::ArenaDtor(void* object) {
  LogOperator* _this = reinterpret_cast< LogOperator* >(object);
  (void)_this;
}
void LogOperator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogOperator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogOperator& LogOperator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogOperator_phxeditlog_2eproto.base);
  return *internal_default_instance();
}


void LogOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:phxeditlog.LogOperator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mkr_ != nullptr) {
    delete mkr_;
  }
  mkr_ = nullptr;
  if (GetArena() == nullptr && rmr_ != nullptr) {
    delete rmr_;
  }
  rmr_ = nullptr;
  if (GetArena() == nullptr && cre_ != nullptr) {
    delete cre_;
  }
  cre_ = nullptr;
  if (GetArena() == nullptr && gab_ != nullptr) {
    delete gab_;
  }
  gab_ = nullptr;
  if (GetArena() == nullptr && cle_ != nullptr) {
    delete cle_;
  }
  cle_ = nullptr;
  if (GetArena() == nullptr && rm_ != nullptr) {
    delete rm_;
  }
  rm_ = nullptr;
  if (GetArena() == nullptr && luf_ != nullptr) {
    delete luf_;
  }
  luf_ = nullptr;
  optype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogOperator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 optype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          optype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxeditlog.LogMkdir mkr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mkr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxeditlog.LogRmr rmr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rmr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxeditlog.LogCreate cre = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cre(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxeditlog.LogGetAdditionalBlk gab = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gab(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxeditlog.LogClose cle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxeditlog.LogRm rm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .phxeditlog.LogUpdateFinish luf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_luf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogOperator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:phxeditlog.LogOperator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 optype = 1;
  if (this->optype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_optype(), target);
  }

  // .phxeditlog.LogMkdir mkr = 2;
  if (this->has_mkr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mkr(this), target, stream);
  }

  // .phxeditlog.LogRmr rmr = 3;
  if (this->has_rmr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rmr(this), target, stream);
  }

  // .phxeditlog.LogCreate cre = 4;
  if (this->has_cre()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cre(this), target, stream);
  }

  // .phxeditlog.LogGetAdditionalBlk gab = 5;
  if (this->has_gab()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gab(this), target, stream);
  }

  // .phxeditlog.LogClose cle = 6;
  if (this->has_cle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cle(this), target, stream);
  }

  // .phxeditlog.LogRm rm = 7;
  if (this->has_rm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rm(this), target, stream);
  }

  // .phxeditlog.LogUpdateFinish luf = 8;
  if (this->has_luf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::luf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:phxeditlog.LogOperator)
  return target;
}

size_t LogOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:phxeditlog.LogOperator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .phxeditlog.LogMkdir mkr = 2;
  if (this->has_mkr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mkr_);
  }

  // .phxeditlog.LogRmr rmr = 3;
  if (this->has_rmr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rmr_);
  }

  // .phxeditlog.LogCreate cre = 4;
  if (this->has_cre()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cre_);
  }

  // .phxeditlog.LogGetAdditionalBlk gab = 5;
  if (this->has_gab()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gab_);
  }

  // .phxeditlog.LogClose cle = 6;
  if (this->has_cle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cle_);
  }

  // .phxeditlog.LogRm rm = 7;
  if (this->has_rm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rm_);
  }

  // .phxeditlog.LogUpdateFinish luf = 8;
  if (this->has_luf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *luf_);
  }

  // uint32 optype = 1;
  if (this->optype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_optype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogOperator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:phxeditlog.LogOperator)
  GOOGLE_DCHECK_NE(&from, this);
  const LogOperator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogOperator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:phxeditlog.LogOperator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:phxeditlog.LogOperator)
    MergeFrom(*source);
  }
}

void LogOperator::MergeFrom(const LogOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:phxeditlog.LogOperator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mkr()) {
    _internal_mutable_mkr()->::phxeditlog::LogMkdir::MergeFrom(from._internal_mkr());
  }
  if (from.has_rmr()) {
    _internal_mutable_rmr()->::phxeditlog::LogRmr::MergeFrom(from._internal_rmr());
  }
  if (from.has_cre()) {
    _internal_mutable_cre()->::phxeditlog::LogCreate::MergeFrom(from._internal_cre());
  }
  if (from.has_gab()) {
    _internal_mutable_gab()->::phxeditlog::LogGetAdditionalBlk::MergeFrom(from._internal_gab());
  }
  if (from.has_cle()) {
    _internal_mutable_cle()->::phxeditlog::LogClose::MergeFrom(from._internal_cle());
  }
  if (from.has_rm()) {
    _internal_mutable_rm()->::phxeditlog::LogRm::MergeFrom(from._internal_rm());
  }
  if (from.has_luf()) {
    _internal_mutable_luf()->::phxeditlog::LogUpdateFinish::MergeFrom(from._internal_luf());
  }
  if (from.optype() != 0) {
    _internal_set_optype(from._internal_optype());
  }
}

void LogOperator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:phxeditlog.LogOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOperator::CopyFrom(const LogOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:phxeditlog.LogOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOperator::IsInitialized() const {
  return true;
}

void LogOperator::InternalSwap(LogOperator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogOperator, optype_)
      + sizeof(LogOperator::optype_)
      - PROTOBUF_FIELD_OFFSET(LogOperator, mkr_)>(
          reinterpret_cast<char*>(&mkr_),
          reinterpret_cast<char*>(&other->mkr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogOperator::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace phxeditlog
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::phxeditlog::LogMkdir* Arena::CreateMaybeMessage< ::phxeditlog::LogMkdir >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxeditlog::LogMkdir >(arena);
}
template<> PROTOBUF_NOINLINE ::phxeditlog::LogRmr* Arena::CreateMaybeMessage< ::phxeditlog::LogRmr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxeditlog::LogRmr >(arena);
}
template<> PROTOBUF_NOINLINE ::phxeditlog::LogCreate* Arena::CreateMaybeMessage< ::phxeditlog::LogCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxeditlog::LogCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::phxeditlog::LogGetAdditionalBlk* Arena::CreateMaybeMessage< ::phxeditlog::LogGetAdditionalBlk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxeditlog::LogGetAdditionalBlk >(arena);
}
template<> PROTOBUF_NOINLINE ::phxeditlog::LogClose* Arena::CreateMaybeMessage< ::phxeditlog::LogClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxeditlog::LogClose >(arena);
}
template<> PROTOBUF_NOINLINE ::phxeditlog::LogUpdateFinish* Arena::CreateMaybeMessage< ::phxeditlog::LogUpdateFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxeditlog::LogUpdateFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::phxeditlog::LogRm* Arena::CreateMaybeMessage< ::phxeditlog::LogRm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxeditlog::LogRm >(arena);
}
template<> PROTOBUF_NOINLINE ::phxeditlog::LogOperator* Arena::CreateMaybeMessage< ::phxeditlog::LogOperator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::phxeditlog::LogOperator >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
