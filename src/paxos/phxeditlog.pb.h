// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phxeditlog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_phxeditlog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_phxeditlog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_phxeditlog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_phxeditlog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_phxeditlog_2eproto;
namespace phxeditlog {
class LogClose;
class LogCloseDefaultTypeInternal;
extern LogCloseDefaultTypeInternal _LogClose_default_instance_;
class LogCreate;
class LogCreateDefaultTypeInternal;
extern LogCreateDefaultTypeInternal _LogCreate_default_instance_;
class LogGetAdditionalBlk;
class LogGetAdditionalBlkDefaultTypeInternal;
extern LogGetAdditionalBlkDefaultTypeInternal _LogGetAdditionalBlk_default_instance_;
class LogMkdir;
class LogMkdirDefaultTypeInternal;
extern LogMkdirDefaultTypeInternal _LogMkdir_default_instance_;
class LogOperator;
class LogOperatorDefaultTypeInternal;
extern LogOperatorDefaultTypeInternal _LogOperator_default_instance_;
class LogRm;
class LogRmDefaultTypeInternal;
extern LogRmDefaultTypeInternal _LogRm_default_instance_;
class LogRmr;
class LogRmrDefaultTypeInternal;
extern LogRmrDefaultTypeInternal _LogRmr_default_instance_;
class LogUpdateFinish;
class LogUpdateFinishDefaultTypeInternal;
extern LogUpdateFinishDefaultTypeInternal _LogUpdateFinish_default_instance_;
}  // namespace phxeditlog
PROTOBUF_NAMESPACE_OPEN
template<> ::phxeditlog::LogClose* Arena::CreateMaybeMessage<::phxeditlog::LogClose>(Arena*);
template<> ::phxeditlog::LogCreate* Arena::CreateMaybeMessage<::phxeditlog::LogCreate>(Arena*);
template<> ::phxeditlog::LogGetAdditionalBlk* Arena::CreateMaybeMessage<::phxeditlog::LogGetAdditionalBlk>(Arena*);
template<> ::phxeditlog::LogMkdir* Arena::CreateMaybeMessage<::phxeditlog::LogMkdir>(Arena*);
template<> ::phxeditlog::LogOperator* Arena::CreateMaybeMessage<::phxeditlog::LogOperator>(Arena*);
template<> ::phxeditlog::LogRm* Arena::CreateMaybeMessage<::phxeditlog::LogRm>(Arena*);
template<> ::phxeditlog::LogRmr* Arena::CreateMaybeMessage<::phxeditlog::LogRmr>(Arena*);
template<> ::phxeditlog::LogUpdateFinish* Arena::CreateMaybeMessage<::phxeditlog::LogUpdateFinish>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace phxeditlog {

// ===================================================================

class LogMkdir PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogMkdir) */ {
 public:
  inline LogMkdir() : LogMkdir(nullptr) {};
  virtual ~LogMkdir();

  LogMkdir(const LogMkdir& from);
  LogMkdir(LogMkdir&& from) noexcept
    : LogMkdir() {
    *this = ::std::move(from);
  }

  inline LogMkdir& operator=(const LogMkdir& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMkdir& operator=(LogMkdir&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogMkdir& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMkdir* internal_default_instance() {
    return reinterpret_cast<const LogMkdir*>(
               &_LogMkdir_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogMkdir& a, LogMkdir& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMkdir* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogMkdir* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMkdir* New() const final {
    return CreateMaybeMessage<LogMkdir>(nullptr);
  }

  LogMkdir* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMkdir>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogMkdir& from);
  void MergeFrom(const LogMkdir& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogMkdir* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxeditlog.LogMkdir";
  }
  protected:
  explicit LogMkdir(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxeditlog_2eproto);
    return ::descriptor_table_phxeditlog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kOwnerFieldNumber = 3,
    kGroupFieldNumber = 4,
    kModificationTimeFieldNumber = 5,
    kPermissionFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string owner = 3;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_owner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_owner(
      std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string group = 4;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group(
      std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // uint64 modification_time = 5;
  void clear_modification_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time() const;
  void set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_modification_time() const;
  void _internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 permission = 2;
  void clear_permission();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission() const;
  void set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission() const;
  void _internal_set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxeditlog.LogMkdir)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxeditlog_2eproto;
};
// -------------------------------------------------------------------

class LogRmr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogRmr) */ {
 public:
  inline LogRmr() : LogRmr(nullptr) {};
  virtual ~LogRmr();

  LogRmr(const LogRmr& from);
  LogRmr(LogRmr&& from) noexcept
    : LogRmr() {
    *this = ::std::move(from);
  }

  inline LogRmr& operator=(const LogRmr& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRmr& operator=(LogRmr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRmr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRmr* internal_default_instance() {
    return reinterpret_cast<const LogRmr*>(
               &_LogRmr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogRmr& a, LogRmr& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRmr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRmr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRmr* New() const final {
    return CreateMaybeMessage<LogRmr>(nullptr);
  }

  LogRmr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRmr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRmr& from);
  void MergeFrom(const LogRmr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRmr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxeditlog.LogRmr";
  }
  protected:
  explicit LogRmr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxeditlog_2eproto);
    return ::descriptor_table_phxeditlog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kModificationTimeFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 modification_time = 2;
  void clear_modification_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time() const;
  void set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_modification_time() const;
  void _internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:phxeditlog.LogRmr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxeditlog_2eproto;
};
// -------------------------------------------------------------------

class LogCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogCreate) */ {
 public:
  inline LogCreate() : LogCreate(nullptr) {};
  virtual ~LogCreate();

  LogCreate(const LogCreate& from);
  LogCreate(LogCreate&& from) noexcept
    : LogCreate() {
    *this = ::std::move(from);
  }

  inline LogCreate& operator=(const LogCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogCreate& operator=(LogCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogCreate* internal_default_instance() {
    return reinterpret_cast<const LogCreate*>(
               &_LogCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogCreate& a, LogCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(LogCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogCreate* New() const final {
    return CreateMaybeMessage<LogCreate>(nullptr);
  }

  LogCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogCreate& from);
  void MergeFrom(const LogCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxeditlog.LogCreate";
  }
  protected:
  explicit LogCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxeditlog_2eproto);
    return ::descriptor_table_phxeditlog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kOwnerFieldNumber = 3,
    kGroupFieldNumber = 4,
    kModificationTimeFieldNumber = 5,
    kPermissionFieldNumber = 2,
    kBlkRepFieldNumber = 8,
    kBlkIdFieldNumber = 6,
    kBlkSzFieldNumber = 7,
    kBlkSeqFieldNumber = 9,
    kTotalBlkFieldNumber = 10,
    kTBlkSzFieldNumber = 11,
    kTSubSzFieldNumber = 12,
    kTHelpSzFieldNumber = 13,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string owner = 3;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_owner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_owner(
      std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string group = 4;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_group();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_group(
      std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // uint64 modification_time = 5;
  void clear_modification_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time() const;
  void set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_modification_time() const;
  void _internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 permission = 2;
  void clear_permission();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission() const;
  void set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission() const;
  void _internal_set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 blk_rep = 8;
  void clear_blk_rep();
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_rep() const;
  void set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blk_rep() const;
  void _internal_set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 blk_id = 6;
  void clear_blk_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_id() const;
  void set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blk_id() const;
  void _internal_set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 blk_sz = 7;
  void clear_blk_sz();
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_sz() const;
  void set_blk_sz(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blk_sz() const;
  void _internal_set_blk_sz(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 blk_seq = 9;
  void clear_blk_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_seq() const;
  void set_blk_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blk_seq() const;
  void _internal_set_blk_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_blk = 10;
  void clear_total_blk();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_blk() const;
  void set_total_blk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_blk() const;
  void _internal_set_total_blk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 t_blk_sz = 11;
  void clear_t_blk_sz();
  ::PROTOBUF_NAMESPACE_ID::uint32 t_blk_sz() const;
  void set_t_blk_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_t_blk_sz() const;
  void _internal_set_t_blk_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 t_sub_sz = 12;
  void clear_t_sub_sz();
  ::PROTOBUF_NAMESPACE_ID::uint32 t_sub_sz() const;
  void set_t_sub_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_t_sub_sz() const;
  void _internal_set_t_sub_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 t_help_sz = 13;
  void clear_t_help_sz();
  ::PROTOBUF_NAMESPACE_ID::uint32 t_help_sz() const;
  void set_t_help_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_t_help_sz() const;
  void _internal_set_t_help_sz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxeditlog.LogCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_rep_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_sz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_blk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 t_blk_sz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 t_sub_sz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 t_help_sz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxeditlog_2eproto;
};
// -------------------------------------------------------------------

class LogGetAdditionalBlk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogGetAdditionalBlk) */ {
 public:
  inline LogGetAdditionalBlk() : LogGetAdditionalBlk(nullptr) {};
  virtual ~LogGetAdditionalBlk();

  LogGetAdditionalBlk(const LogGetAdditionalBlk& from);
  LogGetAdditionalBlk(LogGetAdditionalBlk&& from) noexcept
    : LogGetAdditionalBlk() {
    *this = ::std::move(from);
  }

  inline LogGetAdditionalBlk& operator=(const LogGetAdditionalBlk& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGetAdditionalBlk& operator=(LogGetAdditionalBlk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogGetAdditionalBlk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogGetAdditionalBlk* internal_default_instance() {
    return reinterpret_cast<const LogGetAdditionalBlk*>(
               &_LogGetAdditionalBlk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogGetAdditionalBlk& a, LogGetAdditionalBlk& b) {
    a.Swap(&b);
  }
  inline void Swap(LogGetAdditionalBlk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGetAdditionalBlk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogGetAdditionalBlk* New() const final {
    return CreateMaybeMessage<LogGetAdditionalBlk>(nullptr);
  }

  LogGetAdditionalBlk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogGetAdditionalBlk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogGetAdditionalBlk& from);
  void MergeFrom(const LogGetAdditionalBlk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGetAdditionalBlk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxeditlog.LogGetAdditionalBlk";
  }
  protected:
  explicit LogGetAdditionalBlk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxeditlog_2eproto);
    return ::descriptor_table_phxeditlog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kBlkIdFieldNumber = 2,
    kBlkSzFieldNumber = 3,
    kBlkRepFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 blk_id = 2;
  void clear_blk_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_id() const;
  void set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blk_id() const;
  void _internal_set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 blk_sz = 3;
  void clear_blk_sz();
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_sz() const;
  void set_blk_sz(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blk_sz() const;
  void _internal_set_blk_sz(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 blk_rep = 4;
  void clear_blk_rep();
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_rep() const;
  void set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blk_rep() const;
  void _internal_set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxeditlog.LogGetAdditionalBlk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_sz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_rep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxeditlog_2eproto;
};
// -------------------------------------------------------------------

class LogClose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogClose) */ {
 public:
  inline LogClose() : LogClose(nullptr) {};
  virtual ~LogClose();

  LogClose(const LogClose& from);
  LogClose(LogClose&& from) noexcept
    : LogClose() {
    *this = ::std::move(from);
  }

  inline LogClose& operator=(const LogClose& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogClose& operator=(LogClose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogClose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogClose* internal_default_instance() {
    return reinterpret_cast<const LogClose*>(
               &_LogClose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogClose& a, LogClose& b) {
    a.Swap(&b);
  }
  inline void Swap(LogClose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogClose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogClose* New() const final {
    return CreateMaybeMessage<LogClose>(nullptr);
  }

  LogClose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogClose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogClose& from);
  void MergeFrom(const LogClose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogClose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxeditlog.LogClose";
  }
  protected:
  explicit LogClose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxeditlog_2eproto);
    return ::descriptor_table_phxeditlog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kModificationTimeFieldNumber = 2,
    kLenFieldNumber = 3,
    kBlkRepFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 modification_time = 2;
  void clear_modification_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time() const;
  void set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_modification_time() const;
  void _internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 len = 3;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 blk_rep = 4;
  void clear_blk_rep();
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_rep() const;
  void set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blk_rep() const;
  void _internal_set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxeditlog.LogClose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blk_rep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxeditlog_2eproto;
};
// -------------------------------------------------------------------

class LogUpdateFinish PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogUpdateFinish) */ {
 public:
  inline LogUpdateFinish() : LogUpdateFinish(nullptr) {};
  virtual ~LogUpdateFinish();

  LogUpdateFinish(const LogUpdateFinish& from);
  LogUpdateFinish(LogUpdateFinish&& from) noexcept
    : LogUpdateFinish() {
    *this = ::std::move(from);
  }

  inline LogUpdateFinish& operator=(const LogUpdateFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogUpdateFinish& operator=(LogUpdateFinish&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogUpdateFinish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogUpdateFinish* internal_default_instance() {
    return reinterpret_cast<const LogUpdateFinish*>(
               &_LogUpdateFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogUpdateFinish& a, LogUpdateFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(LogUpdateFinish* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogUpdateFinish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogUpdateFinish* New() const final {
    return CreateMaybeMessage<LogUpdateFinish>(nullptr);
  }

  LogUpdateFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogUpdateFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogUpdateFinish& from);
  void MergeFrom(const LogUpdateFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogUpdateFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxeditlog.LogUpdateFinish";
  }
  protected:
  explicit LogUpdateFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxeditlog_2eproto);
    return ::descriptor_table_phxeditlog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDnIpFieldNumber = 4,
    kBlkIdFieldNumber = 2,
    kBlkSizeFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string dn_ip = 4;
  void clear_dn_ip();
  const std::string& dn_ip() const;
  void set_dn_ip(const std::string& value);
  void set_dn_ip(std::string&& value);
  void set_dn_ip(const char* value);
  void set_dn_ip(const char* value, size_t size);
  std::string* mutable_dn_ip();
  std::string* release_dn_ip();
  void set_allocated_dn_ip(std::string* dn_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dn_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dn_ip(
      std::string* dn_ip);
  private:
  const std::string& _internal_dn_ip() const;
  void _internal_set_dn_ip(const std::string& value);
  std::string* _internal_mutable_dn_ip();
  public:

  // uint64 blk_id = 2;
  void clear_blk_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_id() const;
  void set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blk_id() const;
  void _internal_set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 blk_size = 3;
  void clear_blk_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_size() const;
  void set_blk_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blk_size() const;
  void _internal_set_blk_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:phxeditlog.LogUpdateFinish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dn_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blk_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxeditlog_2eproto;
};
// -------------------------------------------------------------------

class LogRm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogRm) */ {
 public:
  inline LogRm() : LogRm(nullptr) {};
  virtual ~LogRm();

  LogRm(const LogRm& from);
  LogRm(LogRm&& from) noexcept
    : LogRm() {
    *this = ::std::move(from);
  }

  inline LogRm& operator=(const LogRm& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRm& operator=(LogRm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogRm* internal_default_instance() {
    return reinterpret_cast<const LogRm*>(
               &_LogRm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogRm& a, LogRm& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRm* New() const final {
    return CreateMaybeMessage<LogRm>(nullptr);
  }

  LogRm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRm& from);
  void MergeFrom(const LogRm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxeditlog.LogRm";
  }
  protected:
  explicit LogRm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxeditlog_2eproto);
    return ::descriptor_table_phxeditlog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kModificationTimeFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 modification_time = 2;
  void clear_modification_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time() const;
  void set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_modification_time() const;
  void _internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:phxeditlog.LogRm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 modification_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxeditlog_2eproto;
};
// -------------------------------------------------------------------

class LogOperator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:phxeditlog.LogOperator) */ {
 public:
  inline LogOperator() : LogOperator(nullptr) {};
  virtual ~LogOperator();

  LogOperator(const LogOperator& from);
  LogOperator(LogOperator&& from) noexcept
    : LogOperator() {
    *this = ::std::move(from);
  }

  inline LogOperator& operator=(const LogOperator& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogOperator& operator=(LogOperator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogOperator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogOperator* internal_default_instance() {
    return reinterpret_cast<const LogOperator*>(
               &_LogOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LogOperator& a, LogOperator& b) {
    a.Swap(&b);
  }
  inline void Swap(LogOperator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogOperator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogOperator* New() const final {
    return CreateMaybeMessage<LogOperator>(nullptr);
  }

  LogOperator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogOperator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogOperator& from);
  void MergeFrom(const LogOperator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogOperator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "phxeditlog.LogOperator";
  }
  protected:
  explicit LogOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_phxeditlog_2eproto);
    return ::descriptor_table_phxeditlog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMkrFieldNumber = 2,
    kRmrFieldNumber = 3,
    kCreFieldNumber = 4,
    kGabFieldNumber = 5,
    kCleFieldNumber = 6,
    kRmFieldNumber = 7,
    kLufFieldNumber = 8,
    kOptypeFieldNumber = 1,
  };
  // .phxeditlog.LogMkdir mkr = 2;
  bool has_mkr() const;
  private:
  bool _internal_has_mkr() const;
  public:
  void clear_mkr();
  const ::phxeditlog::LogMkdir& mkr() const;
  ::phxeditlog::LogMkdir* release_mkr();
  ::phxeditlog::LogMkdir* mutable_mkr();
  void set_allocated_mkr(::phxeditlog::LogMkdir* mkr);
  private:
  const ::phxeditlog::LogMkdir& _internal_mkr() const;
  ::phxeditlog::LogMkdir* _internal_mutable_mkr();
  public:
  void unsafe_arena_set_allocated_mkr(
      ::phxeditlog::LogMkdir* mkr);
  ::phxeditlog::LogMkdir* unsafe_arena_release_mkr();

  // .phxeditlog.LogRmr rmr = 3;
  bool has_rmr() const;
  private:
  bool _internal_has_rmr() const;
  public:
  void clear_rmr();
  const ::phxeditlog::LogRmr& rmr() const;
  ::phxeditlog::LogRmr* release_rmr();
  ::phxeditlog::LogRmr* mutable_rmr();
  void set_allocated_rmr(::phxeditlog::LogRmr* rmr);
  private:
  const ::phxeditlog::LogRmr& _internal_rmr() const;
  ::phxeditlog::LogRmr* _internal_mutable_rmr();
  public:
  void unsafe_arena_set_allocated_rmr(
      ::phxeditlog::LogRmr* rmr);
  ::phxeditlog::LogRmr* unsafe_arena_release_rmr();

  // .phxeditlog.LogCreate cre = 4;
  bool has_cre() const;
  private:
  bool _internal_has_cre() const;
  public:
  void clear_cre();
  const ::phxeditlog::LogCreate& cre() const;
  ::phxeditlog::LogCreate* release_cre();
  ::phxeditlog::LogCreate* mutable_cre();
  void set_allocated_cre(::phxeditlog::LogCreate* cre);
  private:
  const ::phxeditlog::LogCreate& _internal_cre() const;
  ::phxeditlog::LogCreate* _internal_mutable_cre();
  public:
  void unsafe_arena_set_allocated_cre(
      ::phxeditlog::LogCreate* cre);
  ::phxeditlog::LogCreate* unsafe_arena_release_cre();

  // .phxeditlog.LogGetAdditionalBlk gab = 5;
  bool has_gab() const;
  private:
  bool _internal_has_gab() const;
  public:
  void clear_gab();
  const ::phxeditlog::LogGetAdditionalBlk& gab() const;
  ::phxeditlog::LogGetAdditionalBlk* release_gab();
  ::phxeditlog::LogGetAdditionalBlk* mutable_gab();
  void set_allocated_gab(::phxeditlog::LogGetAdditionalBlk* gab);
  private:
  const ::phxeditlog::LogGetAdditionalBlk& _internal_gab() const;
  ::phxeditlog::LogGetAdditionalBlk* _internal_mutable_gab();
  public:
  void unsafe_arena_set_allocated_gab(
      ::phxeditlog::LogGetAdditionalBlk* gab);
  ::phxeditlog::LogGetAdditionalBlk* unsafe_arena_release_gab();

  // .phxeditlog.LogClose cle = 6;
  bool has_cle() const;
  private:
  bool _internal_has_cle() const;
  public:
  void clear_cle();
  const ::phxeditlog::LogClose& cle() const;
  ::phxeditlog::LogClose* release_cle();
  ::phxeditlog::LogClose* mutable_cle();
  void set_allocated_cle(::phxeditlog::LogClose* cle);
  private:
  const ::phxeditlog::LogClose& _internal_cle() const;
  ::phxeditlog::LogClose* _internal_mutable_cle();
  public:
  void unsafe_arena_set_allocated_cle(
      ::phxeditlog::LogClose* cle);
  ::phxeditlog::LogClose* unsafe_arena_release_cle();

  // .phxeditlog.LogRm rm = 7;
  bool has_rm() const;
  private:
  bool _internal_has_rm() const;
  public:
  void clear_rm();
  const ::phxeditlog::LogRm& rm() const;
  ::phxeditlog::LogRm* release_rm();
  ::phxeditlog::LogRm* mutable_rm();
  void set_allocated_rm(::phxeditlog::LogRm* rm);
  private:
  const ::phxeditlog::LogRm& _internal_rm() const;
  ::phxeditlog::LogRm* _internal_mutable_rm();
  public:
  void unsafe_arena_set_allocated_rm(
      ::phxeditlog::LogRm* rm);
  ::phxeditlog::LogRm* unsafe_arena_release_rm();

  // .phxeditlog.LogUpdateFinish luf = 8;
  bool has_luf() const;
  private:
  bool _internal_has_luf() const;
  public:
  void clear_luf();
  const ::phxeditlog::LogUpdateFinish& luf() const;
  ::phxeditlog::LogUpdateFinish* release_luf();
  ::phxeditlog::LogUpdateFinish* mutable_luf();
  void set_allocated_luf(::phxeditlog::LogUpdateFinish* luf);
  private:
  const ::phxeditlog::LogUpdateFinish& _internal_luf() const;
  ::phxeditlog::LogUpdateFinish* _internal_mutable_luf();
  public:
  void unsafe_arena_set_allocated_luf(
      ::phxeditlog::LogUpdateFinish* luf);
  ::phxeditlog::LogUpdateFinish* unsafe_arena_release_luf();

  // uint32 optype = 1;
  void clear_optype();
  ::PROTOBUF_NAMESPACE_ID::uint32 optype() const;
  void set_optype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_optype() const;
  void _internal_set_optype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:phxeditlog.LogOperator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::phxeditlog::LogMkdir* mkr_;
  ::phxeditlog::LogRmr* rmr_;
  ::phxeditlog::LogCreate* cre_;
  ::phxeditlog::LogGetAdditionalBlk* gab_;
  ::phxeditlog::LogClose* cle_;
  ::phxeditlog::LogRm* rm_;
  ::phxeditlog::LogUpdateFinish* luf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 optype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_phxeditlog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogMkdir

// string key = 1;
inline void LogMkdir::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogMkdir::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.key)
  return _internal_key();
}
inline void LogMkdir::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.key)
}
inline std::string* LogMkdir::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.key)
  return _internal_mutable_key();
}
inline const std::string& LogMkdir::_internal_key() const {
  return key_.Get();
}
inline void LogMkdir::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogMkdir::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogMkdir.key)
}
inline void LogMkdir::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.key)
}
inline void LogMkdir::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.key)
}
inline std::string* LogMkdir::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogMkdir::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogMkdir::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.key)
}
inline std::string* LogMkdir::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogMkdir.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogMkdir::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogMkdir.key)
}

// uint32 permission = 2;
inline void LogMkdir::clear_permission() {
  permission_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogMkdir::_internal_permission() const {
  return permission_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogMkdir::permission() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.permission)
  return _internal_permission();
}
inline void LogMkdir::_internal_set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_ = value;
}
inline void LogMkdir::set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.permission)
}

// string owner = 3;
inline void LogMkdir::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogMkdir::owner() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.owner)
  return _internal_owner();
}
inline void LogMkdir::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.owner)
}
inline std::string* LogMkdir::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.owner)
  return _internal_mutable_owner();
}
inline const std::string& LogMkdir::_internal_owner() const {
  return owner_.Get();
}
inline void LogMkdir::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogMkdir::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogMkdir.owner)
}
inline void LogMkdir::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.owner)
}
inline void LogMkdir::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.owner)
}
inline std::string* LogMkdir::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogMkdir::release_owner() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogMkdir::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.owner)
}
inline std::string* LogMkdir::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogMkdir.owner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return owner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogMkdir::unsafe_arena_set_allocated_owner(
    std::string* owner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      owner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogMkdir.owner)
}

// string group = 4;
inline void LogMkdir::clear_group() {
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogMkdir::group() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.group)
  return _internal_group();
}
inline void LogMkdir::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.group)
}
inline std::string* LogMkdir::mutable_group() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogMkdir.group)
  return _internal_mutable_group();
}
inline const std::string& LogMkdir::_internal_group() const {
  return group_.Get();
}
inline void LogMkdir::_internal_set_group(const std::string& value) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogMkdir::set_group(std::string&& value) {
  
  group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogMkdir.group)
}
inline void LogMkdir::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogMkdir.group)
}
inline void LogMkdir::set_group(const char* value,
    size_t size) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogMkdir.group)
}
inline std::string* LogMkdir::_internal_mutable_group() {
  
  return group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogMkdir::release_group() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogMkdir.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogMkdir::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogMkdir.group)
}
inline std::string* LogMkdir::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogMkdir.group)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogMkdir::unsafe_arena_set_allocated_group(
    std::string* group) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group != nullptr) {
    
  } else {
    
  }
  group_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogMkdir.group)
}

// uint64 modification_time = 5;
inline void LogMkdir::clear_modification_time() {
  modification_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogMkdir::_internal_modification_time() const {
  return modification_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogMkdir::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogMkdir.modification_time)
  return _internal_modification_time();
}
inline void LogMkdir::_internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  modification_time_ = value;
}
inline void LogMkdir::set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_modification_time(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogMkdir.modification_time)
}

// -------------------------------------------------------------------

// LogRmr

// string key = 1;
inline void LogRmr::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogRmr::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRmr.key)
  return _internal_key();
}
inline void LogRmr::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogRmr.key)
}
inline std::string* LogRmr::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogRmr.key)
  return _internal_mutable_key();
}
inline const std::string& LogRmr::_internal_key() const {
  return key_.Get();
}
inline void LogRmr::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogRmr::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogRmr.key)
}
inline void LogRmr::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogRmr.key)
}
inline void LogRmr::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogRmr.key)
}
inline std::string* LogRmr::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogRmr::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogRmr.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogRmr::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogRmr.key)
}
inline std::string* LogRmr::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogRmr.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogRmr::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogRmr.key)
}

// uint64 modification_time = 2;
inline void LogRmr::clear_modification_time() {
  modification_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRmr::_internal_modification_time() const {
  return modification_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRmr::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRmr.modification_time)
  return _internal_modification_time();
}
inline void LogRmr::_internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  modification_time_ = value;
}
inline void LogRmr::set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_modification_time(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogRmr.modification_time)
}

// -------------------------------------------------------------------

// LogCreate

// string key = 1;
inline void LogCreate::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogCreate::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.key)
  return _internal_key();
}
inline void LogCreate::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.key)
}
inline std::string* LogCreate::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.key)
  return _internal_mutable_key();
}
inline const std::string& LogCreate::_internal_key() const {
  return key_.Get();
}
inline void LogCreate::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogCreate::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogCreate.key)
}
inline void LogCreate::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.key)
}
inline void LogCreate::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.key)
}
inline std::string* LogCreate::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogCreate::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogCreate::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.key)
}
inline std::string* LogCreate::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogCreate.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogCreate::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogCreate.key)
}

// uint32 permission = 2;
inline void LogCreate::clear_permission() {
  permission_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::_internal_permission() const {
  return permission_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::permission() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.permission)
  return _internal_permission();
}
inline void LogCreate::_internal_set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_ = value;
}
inline void LogCreate::set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.permission)
}

// string owner = 3;
inline void LogCreate::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogCreate::owner() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.owner)
  return _internal_owner();
}
inline void LogCreate::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.owner)
}
inline std::string* LogCreate::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.owner)
  return _internal_mutable_owner();
}
inline const std::string& LogCreate::_internal_owner() const {
  return owner_.Get();
}
inline void LogCreate::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogCreate::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogCreate.owner)
}
inline void LogCreate::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.owner)
}
inline void LogCreate::set_owner(const char* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.owner)
}
inline std::string* LogCreate::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogCreate::release_owner() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogCreate::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.owner)
}
inline std::string* LogCreate::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogCreate.owner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return owner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogCreate::unsafe_arena_set_allocated_owner(
    std::string* owner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      owner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogCreate.owner)
}

// string group = 4;
inline void LogCreate::clear_group() {
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogCreate::group() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.group)
  return _internal_group();
}
inline void LogCreate::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.group)
}
inline std::string* LogCreate::mutable_group() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogCreate.group)
  return _internal_mutable_group();
}
inline const std::string& LogCreate::_internal_group() const {
  return group_.Get();
}
inline void LogCreate::_internal_set_group(const std::string& value) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogCreate::set_group(std::string&& value) {
  
  group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogCreate.group)
}
inline void LogCreate::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogCreate.group)
}
inline void LogCreate::set_group(const char* value,
    size_t size) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogCreate.group)
}
inline std::string* LogCreate::_internal_mutable_group() {
  
  return group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogCreate::release_group() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogCreate.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogCreate::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogCreate.group)
}
inline std::string* LogCreate::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogCreate.group)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return group_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogCreate::unsafe_arena_set_allocated_group(
    std::string* group) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (group != nullptr) {
    
  } else {
    
  }
  group_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      group, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogCreate.group)
}

// uint64 modification_time = 5;
inline void LogCreate::clear_modification_time() {
  modification_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogCreate::_internal_modification_time() const {
  return modification_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogCreate::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.modification_time)
  return _internal_modification_time();
}
inline void LogCreate::_internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  modification_time_ = value;
}
inline void LogCreate::set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_modification_time(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.modification_time)
}

// uint64 blk_id = 6;
inline void LogCreate::clear_blk_id() {
  blk_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogCreate::_internal_blk_id() const {
  return blk_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogCreate::blk_id() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_id)
  return _internal_blk_id();
}
inline void LogCreate::_internal_set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blk_id_ = value;
}
inline void LogCreate::set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blk_id(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_id)
}

// uint64 blk_sz = 7;
inline void LogCreate::clear_blk_sz() {
  blk_sz_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogCreate::_internal_blk_sz() const {
  return blk_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogCreate::blk_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_sz)
  return _internal_blk_sz();
}
inline void LogCreate::_internal_set_blk_sz(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blk_sz_ = value;
}
inline void LogCreate::set_blk_sz(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blk_sz(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_sz)
}

// uint32 blk_rep = 8;
inline void LogCreate::clear_blk_rep() {
  blk_rep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::_internal_blk_rep() const {
  return blk_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_rep)
  return _internal_blk_rep();
}
inline void LogCreate::_internal_set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blk_rep_ = value;
}
inline void LogCreate::set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blk_rep(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_rep)
}

// uint32 blk_seq = 9;
inline void LogCreate::clear_blk_seq() {
  blk_seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::_internal_blk_seq() const {
  return blk_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::blk_seq() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.blk_seq)
  return _internal_blk_seq();
}
inline void LogCreate::_internal_set_blk_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blk_seq_ = value;
}
inline void LogCreate::set_blk_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blk_seq(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.blk_seq)
}

// uint32 total_blk = 10;
inline void LogCreate::clear_total_blk() {
  total_blk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::_internal_total_blk() const {
  return total_blk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::total_blk() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.total_blk)
  return _internal_total_blk();
}
inline void LogCreate::_internal_set_total_blk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_blk_ = value;
}
inline void LogCreate::set_total_blk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_blk(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.total_blk)
}

// uint32 t_blk_sz = 11;
inline void LogCreate::clear_t_blk_sz() {
  t_blk_sz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::_internal_t_blk_sz() const {
  return t_blk_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::t_blk_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.t_blk_sz)
  return _internal_t_blk_sz();
}
inline void LogCreate::_internal_set_t_blk_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  t_blk_sz_ = value;
}
inline void LogCreate::set_t_blk_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_t_blk_sz(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.t_blk_sz)
}

// uint32 t_sub_sz = 12;
inline void LogCreate::clear_t_sub_sz() {
  t_sub_sz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::_internal_t_sub_sz() const {
  return t_sub_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::t_sub_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.t_sub_sz)
  return _internal_t_sub_sz();
}
inline void LogCreate::_internal_set_t_sub_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  t_sub_sz_ = value;
}
inline void LogCreate::set_t_sub_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_t_sub_sz(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.t_sub_sz)
}

// uint32 t_help_sz = 13;
inline void LogCreate::clear_t_help_sz() {
  t_help_sz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::_internal_t_help_sz() const {
  return t_help_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogCreate::t_help_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogCreate.t_help_sz)
  return _internal_t_help_sz();
}
inline void LogCreate::_internal_set_t_help_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  t_help_sz_ = value;
}
inline void LogCreate::set_t_help_sz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_t_help_sz(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogCreate.t_help_sz)
}

// -------------------------------------------------------------------

// LogGetAdditionalBlk

// string key = 1;
inline void LogGetAdditionalBlk::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogGetAdditionalBlk::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.key)
  return _internal_key();
}
inline void LogGetAdditionalBlk::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.key)
}
inline std::string* LogGetAdditionalBlk::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogGetAdditionalBlk.key)
  return _internal_mutable_key();
}
inline const std::string& LogGetAdditionalBlk::_internal_key() const {
  return key_.Get();
}
inline void LogGetAdditionalBlk::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogGetAdditionalBlk::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogGetAdditionalBlk.key)
}
inline void LogGetAdditionalBlk::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogGetAdditionalBlk.key)
}
inline void LogGetAdditionalBlk::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogGetAdditionalBlk.key)
}
inline std::string* LogGetAdditionalBlk::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogGetAdditionalBlk::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogGetAdditionalBlk.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogGetAdditionalBlk::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogGetAdditionalBlk.key)
}
inline std::string* LogGetAdditionalBlk::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogGetAdditionalBlk.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogGetAdditionalBlk::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogGetAdditionalBlk.key)
}

// uint64 blk_id = 2;
inline void LogGetAdditionalBlk::clear_blk_id() {
  blk_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogGetAdditionalBlk::_internal_blk_id() const {
  return blk_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogGetAdditionalBlk::blk_id() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_id)
  return _internal_blk_id();
}
inline void LogGetAdditionalBlk::_internal_set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blk_id_ = value;
}
inline void LogGetAdditionalBlk::set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blk_id(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_id)
}

// uint64 blk_sz = 3;
inline void LogGetAdditionalBlk::clear_blk_sz() {
  blk_sz_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogGetAdditionalBlk::_internal_blk_sz() const {
  return blk_sz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogGetAdditionalBlk::blk_sz() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_sz)
  return _internal_blk_sz();
}
inline void LogGetAdditionalBlk::_internal_set_blk_sz(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blk_sz_ = value;
}
inline void LogGetAdditionalBlk::set_blk_sz(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blk_sz(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_sz)
}

// uint32 blk_rep = 4;
inline void LogGetAdditionalBlk::clear_blk_rep() {
  blk_rep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogGetAdditionalBlk::_internal_blk_rep() const {
  return blk_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogGetAdditionalBlk::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogGetAdditionalBlk.blk_rep)
  return _internal_blk_rep();
}
inline void LogGetAdditionalBlk::_internal_set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blk_rep_ = value;
}
inline void LogGetAdditionalBlk::set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blk_rep(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogGetAdditionalBlk.blk_rep)
}

// -------------------------------------------------------------------

// LogClose

// string key = 1;
inline void LogClose::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogClose::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.key)
  return _internal_key();
}
inline void LogClose::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.key)
}
inline std::string* LogClose::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogClose.key)
  return _internal_mutable_key();
}
inline const std::string& LogClose::_internal_key() const {
  return key_.Get();
}
inline void LogClose::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogClose::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogClose.key)
}
inline void LogClose::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogClose.key)
}
inline void LogClose::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogClose.key)
}
inline std::string* LogClose::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogClose::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogClose.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogClose::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogClose.key)
}
inline std::string* LogClose::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogClose.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogClose::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogClose.key)
}

// uint64 modification_time = 2;
inline void LogClose::clear_modification_time() {
  modification_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogClose::_internal_modification_time() const {
  return modification_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogClose::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.modification_time)
  return _internal_modification_time();
}
inline void LogClose::_internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  modification_time_ = value;
}
inline void LogClose::set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_modification_time(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.modification_time)
}

// uint64 len = 3;
inline void LogClose::clear_len() {
  len_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogClose::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogClose::len() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.len)
  return _internal_len();
}
inline void LogClose::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  len_ = value;
}
inline void LogClose::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.len)
}

// uint32 blk_rep = 4;
inline void LogClose::clear_blk_rep() {
  blk_rep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogClose::_internal_blk_rep() const {
  return blk_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogClose::blk_rep() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogClose.blk_rep)
  return _internal_blk_rep();
}
inline void LogClose::_internal_set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blk_rep_ = value;
}
inline void LogClose::set_blk_rep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blk_rep(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogClose.blk_rep)
}

// -------------------------------------------------------------------

// LogUpdateFinish

// string key = 1;
inline void LogUpdateFinish::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogUpdateFinish::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogUpdateFinish.key)
  return _internal_key();
}
inline void LogUpdateFinish::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogUpdateFinish.key)
}
inline std::string* LogUpdateFinish::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogUpdateFinish.key)
  return _internal_mutable_key();
}
inline const std::string& LogUpdateFinish::_internal_key() const {
  return key_.Get();
}
inline void LogUpdateFinish::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogUpdateFinish::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogUpdateFinish.key)
}
inline void LogUpdateFinish::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogUpdateFinish.key)
}
inline void LogUpdateFinish::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogUpdateFinish.key)
}
inline std::string* LogUpdateFinish::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogUpdateFinish::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogUpdateFinish.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogUpdateFinish::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogUpdateFinish.key)
}
inline std::string* LogUpdateFinish::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogUpdateFinish.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogUpdateFinish::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogUpdateFinish.key)
}

// uint64 blk_id = 2;
inline void LogUpdateFinish::clear_blk_id() {
  blk_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogUpdateFinish::_internal_blk_id() const {
  return blk_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogUpdateFinish::blk_id() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogUpdateFinish.blk_id)
  return _internal_blk_id();
}
inline void LogUpdateFinish::_internal_set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blk_id_ = value;
}
inline void LogUpdateFinish::set_blk_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blk_id(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogUpdateFinish.blk_id)
}

// uint64 blk_size = 3;
inline void LogUpdateFinish::clear_blk_size() {
  blk_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogUpdateFinish::_internal_blk_size() const {
  return blk_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogUpdateFinish::blk_size() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogUpdateFinish.blk_size)
  return _internal_blk_size();
}
inline void LogUpdateFinish::_internal_set_blk_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blk_size_ = value;
}
inline void LogUpdateFinish::set_blk_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blk_size(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogUpdateFinish.blk_size)
}

// string dn_ip = 4;
inline void LogUpdateFinish::clear_dn_ip() {
  dn_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogUpdateFinish::dn_ip() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogUpdateFinish.dn_ip)
  return _internal_dn_ip();
}
inline void LogUpdateFinish::set_dn_ip(const std::string& value) {
  _internal_set_dn_ip(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogUpdateFinish.dn_ip)
}
inline std::string* LogUpdateFinish::mutable_dn_ip() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogUpdateFinish.dn_ip)
  return _internal_mutable_dn_ip();
}
inline const std::string& LogUpdateFinish::_internal_dn_ip() const {
  return dn_ip_.Get();
}
inline void LogUpdateFinish::_internal_set_dn_ip(const std::string& value) {
  
  dn_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogUpdateFinish::set_dn_ip(std::string&& value) {
  
  dn_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogUpdateFinish.dn_ip)
}
inline void LogUpdateFinish::set_dn_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dn_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogUpdateFinish.dn_ip)
}
inline void LogUpdateFinish::set_dn_ip(const char* value,
    size_t size) {
  
  dn_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogUpdateFinish.dn_ip)
}
inline std::string* LogUpdateFinish::_internal_mutable_dn_ip() {
  
  return dn_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogUpdateFinish::release_dn_ip() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogUpdateFinish.dn_ip)
  return dn_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogUpdateFinish::set_allocated_dn_ip(std::string* dn_ip) {
  if (dn_ip != nullptr) {
    
  } else {
    
  }
  dn_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dn_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogUpdateFinish.dn_ip)
}
inline std::string* LogUpdateFinish::unsafe_arena_release_dn_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogUpdateFinish.dn_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dn_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogUpdateFinish::unsafe_arena_set_allocated_dn_ip(
    std::string* dn_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dn_ip != nullptr) {
    
  } else {
    
  }
  dn_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dn_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogUpdateFinish.dn_ip)
}

// -------------------------------------------------------------------

// LogRm

// string key = 1;
inline void LogRm::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogRm::key() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRm.key)
  return _internal_key();
}
inline void LogRm::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogRm.key)
}
inline std::string* LogRm::mutable_key() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogRm.key)
  return _internal_mutable_key();
}
inline const std::string& LogRm::_internal_key() const {
  return key_.Get();
}
inline void LogRm::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogRm::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:phxeditlog.LogRm.key)
}
inline void LogRm::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:phxeditlog.LogRm.key)
}
inline void LogRm::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:phxeditlog.LogRm.key)
}
inline std::string* LogRm::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogRm::release_key() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogRm.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogRm::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogRm.key)
}
inline std::string* LogRm::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:phxeditlog.LogRm.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogRm::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogRm.key)
}

// uint64 modification_time = 2;
inline void LogRm::clear_modification_time() {
  modification_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRm::_internal_modification_time() const {
  return modification_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRm::modification_time() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogRm.modification_time)
  return _internal_modification_time();
}
inline void LogRm::_internal_set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  modification_time_ = value;
}
inline void LogRm::set_modification_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_modification_time(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogRm.modification_time)
}

// -------------------------------------------------------------------

// LogOperator

// uint32 optype = 1;
inline void LogOperator::clear_optype() {
  optype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogOperator::_internal_optype() const {
  return optype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogOperator::optype() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.optype)
  return _internal_optype();
}
inline void LogOperator::_internal_set_optype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  optype_ = value;
}
inline void LogOperator::set_optype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_optype(value);
  // @@protoc_insertion_point(field_set:phxeditlog.LogOperator.optype)
}

// .phxeditlog.LogMkdir mkr = 2;
inline bool LogOperator::_internal_has_mkr() const {
  return this != internal_default_instance() && mkr_ != nullptr;
}
inline bool LogOperator::has_mkr() const {
  return _internal_has_mkr();
}
inline void LogOperator::clear_mkr() {
  if (GetArena() == nullptr && mkr_ != nullptr) {
    delete mkr_;
  }
  mkr_ = nullptr;
}
inline const ::phxeditlog::LogMkdir& LogOperator::_internal_mkr() const {
  const ::phxeditlog::LogMkdir* p = mkr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxeditlog::LogMkdir*>(
      &::phxeditlog::_LogMkdir_default_instance_);
}
inline const ::phxeditlog::LogMkdir& LogOperator::mkr() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.mkr)
  return _internal_mkr();
}
inline void LogOperator::unsafe_arena_set_allocated_mkr(
    ::phxeditlog::LogMkdir* mkr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mkr_);
  }
  mkr_ = mkr;
  if (mkr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogOperator.mkr)
}
inline ::phxeditlog::LogMkdir* LogOperator::release_mkr() {
  auto temp = unsafe_arena_release_mkr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxeditlog::LogMkdir* LogOperator::unsafe_arena_release_mkr() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.mkr)
  
  ::phxeditlog::LogMkdir* temp = mkr_;
  mkr_ = nullptr;
  return temp;
}
inline ::phxeditlog::LogMkdir* LogOperator::_internal_mutable_mkr() {
  
  if (mkr_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxeditlog::LogMkdir>(GetArena());
    mkr_ = p;
  }
  return mkr_;
}
inline ::phxeditlog::LogMkdir* LogOperator::mutable_mkr() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.mkr)
  return _internal_mutable_mkr();
}
inline void LogOperator::set_allocated_mkr(::phxeditlog::LogMkdir* mkr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mkr_;
  }
  if (mkr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mkr);
    if (message_arena != submessage_arena) {
      mkr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mkr, submessage_arena);
    }
    
  } else {
    
  }
  mkr_ = mkr;
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.mkr)
}

// .phxeditlog.LogRmr rmr = 3;
inline bool LogOperator::_internal_has_rmr() const {
  return this != internal_default_instance() && rmr_ != nullptr;
}
inline bool LogOperator::has_rmr() const {
  return _internal_has_rmr();
}
inline void LogOperator::clear_rmr() {
  if (GetArena() == nullptr && rmr_ != nullptr) {
    delete rmr_;
  }
  rmr_ = nullptr;
}
inline const ::phxeditlog::LogRmr& LogOperator::_internal_rmr() const {
  const ::phxeditlog::LogRmr* p = rmr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxeditlog::LogRmr*>(
      &::phxeditlog::_LogRmr_default_instance_);
}
inline const ::phxeditlog::LogRmr& LogOperator::rmr() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.rmr)
  return _internal_rmr();
}
inline void LogOperator::unsafe_arena_set_allocated_rmr(
    ::phxeditlog::LogRmr* rmr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rmr_);
  }
  rmr_ = rmr;
  if (rmr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogOperator.rmr)
}
inline ::phxeditlog::LogRmr* LogOperator::release_rmr() {
  auto temp = unsafe_arena_release_rmr();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxeditlog::LogRmr* LogOperator::unsafe_arena_release_rmr() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.rmr)
  
  ::phxeditlog::LogRmr* temp = rmr_;
  rmr_ = nullptr;
  return temp;
}
inline ::phxeditlog::LogRmr* LogOperator::_internal_mutable_rmr() {
  
  if (rmr_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxeditlog::LogRmr>(GetArena());
    rmr_ = p;
  }
  return rmr_;
}
inline ::phxeditlog::LogRmr* LogOperator::mutable_rmr() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.rmr)
  return _internal_mutable_rmr();
}
inline void LogOperator::set_allocated_rmr(::phxeditlog::LogRmr* rmr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rmr_;
  }
  if (rmr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rmr);
    if (message_arena != submessage_arena) {
      rmr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rmr, submessage_arena);
    }
    
  } else {
    
  }
  rmr_ = rmr;
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.rmr)
}

// .phxeditlog.LogCreate cre = 4;
inline bool LogOperator::_internal_has_cre() const {
  return this != internal_default_instance() && cre_ != nullptr;
}
inline bool LogOperator::has_cre() const {
  return _internal_has_cre();
}
inline void LogOperator::clear_cre() {
  if (GetArena() == nullptr && cre_ != nullptr) {
    delete cre_;
  }
  cre_ = nullptr;
}
inline const ::phxeditlog::LogCreate& LogOperator::_internal_cre() const {
  const ::phxeditlog::LogCreate* p = cre_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxeditlog::LogCreate*>(
      &::phxeditlog::_LogCreate_default_instance_);
}
inline const ::phxeditlog::LogCreate& LogOperator::cre() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.cre)
  return _internal_cre();
}
inline void LogOperator::unsafe_arena_set_allocated_cre(
    ::phxeditlog::LogCreate* cre) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cre_);
  }
  cre_ = cre;
  if (cre) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogOperator.cre)
}
inline ::phxeditlog::LogCreate* LogOperator::release_cre() {
  auto temp = unsafe_arena_release_cre();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxeditlog::LogCreate* LogOperator::unsafe_arena_release_cre() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.cre)
  
  ::phxeditlog::LogCreate* temp = cre_;
  cre_ = nullptr;
  return temp;
}
inline ::phxeditlog::LogCreate* LogOperator::_internal_mutable_cre() {
  
  if (cre_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxeditlog::LogCreate>(GetArena());
    cre_ = p;
  }
  return cre_;
}
inline ::phxeditlog::LogCreate* LogOperator::mutable_cre() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.cre)
  return _internal_mutable_cre();
}
inline void LogOperator::set_allocated_cre(::phxeditlog::LogCreate* cre) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cre_;
  }
  if (cre) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cre);
    if (message_arena != submessage_arena) {
      cre = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cre, submessage_arena);
    }
    
  } else {
    
  }
  cre_ = cre;
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.cre)
}

// .phxeditlog.LogGetAdditionalBlk gab = 5;
inline bool LogOperator::_internal_has_gab() const {
  return this != internal_default_instance() && gab_ != nullptr;
}
inline bool LogOperator::has_gab() const {
  return _internal_has_gab();
}
inline void LogOperator::clear_gab() {
  if (GetArena() == nullptr && gab_ != nullptr) {
    delete gab_;
  }
  gab_ = nullptr;
}
inline const ::phxeditlog::LogGetAdditionalBlk& LogOperator::_internal_gab() const {
  const ::phxeditlog::LogGetAdditionalBlk* p = gab_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxeditlog::LogGetAdditionalBlk*>(
      &::phxeditlog::_LogGetAdditionalBlk_default_instance_);
}
inline const ::phxeditlog::LogGetAdditionalBlk& LogOperator::gab() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.gab)
  return _internal_gab();
}
inline void LogOperator::unsafe_arena_set_allocated_gab(
    ::phxeditlog::LogGetAdditionalBlk* gab) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gab_);
  }
  gab_ = gab;
  if (gab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogOperator.gab)
}
inline ::phxeditlog::LogGetAdditionalBlk* LogOperator::release_gab() {
  auto temp = unsafe_arena_release_gab();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxeditlog::LogGetAdditionalBlk* LogOperator::unsafe_arena_release_gab() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.gab)
  
  ::phxeditlog::LogGetAdditionalBlk* temp = gab_;
  gab_ = nullptr;
  return temp;
}
inline ::phxeditlog::LogGetAdditionalBlk* LogOperator::_internal_mutable_gab() {
  
  if (gab_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxeditlog::LogGetAdditionalBlk>(GetArena());
    gab_ = p;
  }
  return gab_;
}
inline ::phxeditlog::LogGetAdditionalBlk* LogOperator::mutable_gab() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.gab)
  return _internal_mutable_gab();
}
inline void LogOperator::set_allocated_gab(::phxeditlog::LogGetAdditionalBlk* gab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gab_;
  }
  if (gab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gab);
    if (message_arena != submessage_arena) {
      gab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gab, submessage_arena);
    }
    
  } else {
    
  }
  gab_ = gab;
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.gab)
}

// .phxeditlog.LogClose cle = 6;
inline bool LogOperator::_internal_has_cle() const {
  return this != internal_default_instance() && cle_ != nullptr;
}
inline bool LogOperator::has_cle() const {
  return _internal_has_cle();
}
inline void LogOperator::clear_cle() {
  if (GetArena() == nullptr && cle_ != nullptr) {
    delete cle_;
  }
  cle_ = nullptr;
}
inline const ::phxeditlog::LogClose& LogOperator::_internal_cle() const {
  const ::phxeditlog::LogClose* p = cle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxeditlog::LogClose*>(
      &::phxeditlog::_LogClose_default_instance_);
}
inline const ::phxeditlog::LogClose& LogOperator::cle() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.cle)
  return _internal_cle();
}
inline void LogOperator::unsafe_arena_set_allocated_cle(
    ::phxeditlog::LogClose* cle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cle_);
  }
  cle_ = cle;
  if (cle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogOperator.cle)
}
inline ::phxeditlog::LogClose* LogOperator::release_cle() {
  auto temp = unsafe_arena_release_cle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxeditlog::LogClose* LogOperator::unsafe_arena_release_cle() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.cle)
  
  ::phxeditlog::LogClose* temp = cle_;
  cle_ = nullptr;
  return temp;
}
inline ::phxeditlog::LogClose* LogOperator::_internal_mutable_cle() {
  
  if (cle_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxeditlog::LogClose>(GetArena());
    cle_ = p;
  }
  return cle_;
}
inline ::phxeditlog::LogClose* LogOperator::mutable_cle() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.cle)
  return _internal_mutable_cle();
}
inline void LogOperator::set_allocated_cle(::phxeditlog::LogClose* cle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cle_;
  }
  if (cle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cle);
    if (message_arena != submessage_arena) {
      cle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cle, submessage_arena);
    }
    
  } else {
    
  }
  cle_ = cle;
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.cle)
}

// .phxeditlog.LogRm rm = 7;
inline bool LogOperator::_internal_has_rm() const {
  return this != internal_default_instance() && rm_ != nullptr;
}
inline bool LogOperator::has_rm() const {
  return _internal_has_rm();
}
inline void LogOperator::clear_rm() {
  if (GetArena() == nullptr && rm_ != nullptr) {
    delete rm_;
  }
  rm_ = nullptr;
}
inline const ::phxeditlog::LogRm& LogOperator::_internal_rm() const {
  const ::phxeditlog::LogRm* p = rm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxeditlog::LogRm*>(
      &::phxeditlog::_LogRm_default_instance_);
}
inline const ::phxeditlog::LogRm& LogOperator::rm() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.rm)
  return _internal_rm();
}
inline void LogOperator::unsafe_arena_set_allocated_rm(
    ::phxeditlog::LogRm* rm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rm_);
  }
  rm_ = rm;
  if (rm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogOperator.rm)
}
inline ::phxeditlog::LogRm* LogOperator::release_rm() {
  auto temp = unsafe_arena_release_rm();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxeditlog::LogRm* LogOperator::unsafe_arena_release_rm() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.rm)
  
  ::phxeditlog::LogRm* temp = rm_;
  rm_ = nullptr;
  return temp;
}
inline ::phxeditlog::LogRm* LogOperator::_internal_mutable_rm() {
  
  if (rm_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxeditlog::LogRm>(GetArena());
    rm_ = p;
  }
  return rm_;
}
inline ::phxeditlog::LogRm* LogOperator::mutable_rm() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.rm)
  return _internal_mutable_rm();
}
inline void LogOperator::set_allocated_rm(::phxeditlog::LogRm* rm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rm_;
  }
  if (rm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rm);
    if (message_arena != submessage_arena) {
      rm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rm, submessage_arena);
    }
    
  } else {
    
  }
  rm_ = rm;
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.rm)
}

// .phxeditlog.LogUpdateFinish luf = 8;
inline bool LogOperator::_internal_has_luf() const {
  return this != internal_default_instance() && luf_ != nullptr;
}
inline bool LogOperator::has_luf() const {
  return _internal_has_luf();
}
inline void LogOperator::clear_luf() {
  if (GetArena() == nullptr && luf_ != nullptr) {
    delete luf_;
  }
  luf_ = nullptr;
}
inline const ::phxeditlog::LogUpdateFinish& LogOperator::_internal_luf() const {
  const ::phxeditlog::LogUpdateFinish* p = luf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::phxeditlog::LogUpdateFinish*>(
      &::phxeditlog::_LogUpdateFinish_default_instance_);
}
inline const ::phxeditlog::LogUpdateFinish& LogOperator::luf() const {
  // @@protoc_insertion_point(field_get:phxeditlog.LogOperator.luf)
  return _internal_luf();
}
inline void LogOperator::unsafe_arena_set_allocated_luf(
    ::phxeditlog::LogUpdateFinish* luf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(luf_);
  }
  luf_ = luf;
  if (luf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:phxeditlog.LogOperator.luf)
}
inline ::phxeditlog::LogUpdateFinish* LogOperator::release_luf() {
  auto temp = unsafe_arena_release_luf();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::phxeditlog::LogUpdateFinish* LogOperator::unsafe_arena_release_luf() {
  // @@protoc_insertion_point(field_release:phxeditlog.LogOperator.luf)
  
  ::phxeditlog::LogUpdateFinish* temp = luf_;
  luf_ = nullptr;
  return temp;
}
inline ::phxeditlog::LogUpdateFinish* LogOperator::_internal_mutable_luf() {
  
  if (luf_ == nullptr) {
    auto* p = CreateMaybeMessage<::phxeditlog::LogUpdateFinish>(GetArena());
    luf_ = p;
  }
  return luf_;
}
inline ::phxeditlog::LogUpdateFinish* LogOperator::mutable_luf() {
  // @@protoc_insertion_point(field_mutable:phxeditlog.LogOperator.luf)
  return _internal_mutable_luf();
}
inline void LogOperator::set_allocated_luf(::phxeditlog::LogUpdateFinish* luf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete luf_;
  }
  if (luf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(luf);
    if (message_arena != submessage_arena) {
      luf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, luf, submessage_arena);
    }
    
  } else {
    
  }
  luf_ = luf;
  // @@protoc_insertion_point(field_set_allocated:phxeditlog.LogOperator.luf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace phxeditlog

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_phxeditlog_2eproto
